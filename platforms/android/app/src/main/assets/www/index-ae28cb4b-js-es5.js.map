{"version":3,"sources":["node_modules/@ionic/core/dist/esm/index-ae28cb4b.js"],"names":[],"mappings":"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","sourcesContent":["const transitionEnd = (el, callback) => {\r\n    let unRegTrans;\r\n    const opts = { passive: true };\r\n    const unregister = () => {\r\n        if (unRegTrans) {\r\n            unRegTrans();\r\n        }\r\n    };\r\n    const onTransitionEnd = (ev) => {\r\n        if (el === ev.target) {\r\n            unregister();\r\n            callback(ev);\r\n        }\r\n    };\r\n    if (el) {\r\n        el.addEventListener('webkitTransitionEnd', onTransitionEnd, opts);\r\n        el.addEventListener('transitionend', onTransitionEnd, opts);\r\n        unRegTrans = () => {\r\n            el.removeEventListener('webkitTransitionEnd', onTransitionEnd, opts);\r\n            el.removeEventListener('transitionend', onTransitionEnd, opts);\r\n        };\r\n    }\r\n    return unregister;\r\n};\n\nconst CSS_VALUE_REGEX = /(^-?\\d*\\.?\\d*)(.*)/;\r\nconst DURATION_MIN = 32;\r\nconst TRANSITION_END_FALLBACK_PADDING_MS = 400;\r\nconst TRANSFORM_PROPS = {\r\n    'translateX': 1,\r\n    'translateY': 1,\r\n    'translateZ': 1,\r\n    'scale': 1,\r\n    'scaleX': 1,\r\n    'scaleY': 1,\r\n    'scaleZ': 1,\r\n    'rotate': 1,\r\n    'rotateX': 1,\r\n    'rotateY': 1,\r\n    'rotateZ': 1,\r\n    'skewX': 1,\r\n    'skewY': 1,\r\n    'perspective': 1\r\n};\r\nconst win = typeof window !== 'undefined' ? window : {};\r\nconst raf = win.requestAnimationFrame\r\n    ? win.requestAnimationFrame.bind(win)\r\n    : (f) => f(Date.now());\r\nclass Animator {\r\n    constructor() {\r\n        this._hasDur = false;\r\n        this._hasTweenEffect = false;\r\n        this._isAsync = false;\r\n        this._isReverse = false;\r\n        this._destroyed = false;\r\n        this.hasChildren = false;\r\n        this.isPlaying = false;\r\n        this.hasCompleted = false;\r\n    }\r\n    addElement(el) {\r\n        if (el != null) {\r\n            if (el.length > 0) {\r\n                for (let i = 0; i < el.length; i++) {\r\n                    this._addEl(el[i]);\r\n                }\r\n            }\r\n            else {\r\n                this._addEl(el);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * NO DOM\r\n     */\r\n    _addEl(el) {\r\n        if (el.nodeType === 1) {\r\n            (this._elements = this._elements || []).push(el);\r\n        }\r\n    }\r\n    /**\r\n     * Add a child animation to this animation.\r\n     */\r\n    add(childAnimation) {\r\n        childAnimation.parent = this;\r\n        this.hasChildren = true;\r\n        (this._childAnimations = this._childAnimations || []).push(childAnimation);\r\n        return this;\r\n    }\r\n    /**\r\n     * Get the duration of this animation. If this animation does\r\n     * not have a duration, then it'll get the duration from its parent.\r\n     */\r\n    getDuration(opts) {\r\n        if (opts && opts.duration !== undefined) {\r\n            return opts.duration;\r\n        }\r\n        else if (this._duration !== undefined) {\r\n            return this._duration;\r\n        }\r\n        else if (this.parent) {\r\n            return this.parent.getDuration();\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * Returns if the animation is a root one.\r\n     */\r\n    isRoot() {\r\n        return !this.parent;\r\n    }\r\n    /**\r\n     * Set the duration for this animation.\r\n     */\r\n    duration(milliseconds) {\r\n        this._duration = milliseconds;\r\n        return this;\r\n    }\r\n    /**\r\n     * Get the easing of this animation. If this animation does\r\n     * not have an easing, then it'll get the easing from its parent.\r\n     */\r\n    getEasing() {\r\n        if (this._isReverse && this._reversedEasingName !== undefined) {\r\n            return this._reversedEasingName;\r\n        }\r\n        return this._easingName !== undefined ? this._easingName : (this.parent && this.parent.getEasing()) || null;\r\n    }\r\n    /**\r\n     * Set the easing for this animation.\r\n     */\r\n    easing(name) {\r\n        this._easingName = name;\r\n        return this;\r\n    }\r\n    /**\r\n     * Set the easing for this reversed animation.\r\n     */\r\n    easingReverse(name) {\r\n        this._reversedEasingName = name;\r\n        return this;\r\n    }\r\n    /**\r\n     * Add the \"from\" value for a specific property.\r\n     */\r\n    from(prop, val) {\r\n        this._addProp('from', prop, val);\r\n        return this;\r\n    }\r\n    /**\r\n     * Add the \"to\" value for a specific property.\r\n     */\r\n    to(prop, val, clearProperyAfterTransition = false) {\r\n        const fx = this._addProp('to', prop, val);\r\n        if (clearProperyAfterTransition) {\r\n            // if this effect is a transform then clear the transform effect\r\n            // otherwise just clear the actual property\r\n            this.afterClearStyles(fx.trans ? ['transform', '-webkit-transform'] : [prop]);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Shortcut to add both the \"from\" and \"to\" for the same property.\r\n     */\r\n    fromTo(prop, fromVal, toVal, clearProperyAfterTransition) {\r\n        return this.from(prop, fromVal).to(prop, toVal, clearProperyAfterTransition);\r\n    }\r\n    /**\r\n     * NO DOM\r\n     */\r\n    _getProp(name) {\r\n        if (this._fxProperties) {\r\n            return this._fxProperties.find(prop => prop.effectName === name);\r\n        }\r\n        return undefined;\r\n    }\r\n    _addProp(state, prop, val) {\r\n        let fxProp = this._getProp(prop);\r\n        if (!fxProp) {\r\n            // first time we've see this EffectProperty\r\n            const shouldTrans = (TRANSFORM_PROPS[prop] === 1);\r\n            fxProp = {\r\n                effectName: prop,\r\n                trans: shouldTrans,\r\n                // add the will-change property for transforms or opacity\r\n                wc: (shouldTrans ? 'transform' : prop)\r\n            };\r\n            (this._fxProperties = this._fxProperties || []).push(fxProp);\r\n        }\r\n        // add from/to EffectState to the EffectProperty\r\n        const fxState = {\r\n            val,\r\n            num: 0,\r\n            effectUnit: '',\r\n        };\r\n        fxProp[state] = fxState;\r\n        if (typeof val === 'string' && val.indexOf(' ') < 0) {\r\n            const r = val.match(CSS_VALUE_REGEX);\r\n            if (r) {\r\n                const num = parseFloat(r[1]);\r\n                if (!isNaN(num)) {\r\n                    fxState.num = num;\r\n                }\r\n                fxState.effectUnit = (r[0] !== r[2] ? r[2] : '');\r\n            }\r\n        }\r\n        else if (typeof val === 'number') {\r\n            fxState.num = val;\r\n        }\r\n        return fxProp;\r\n    }\r\n    /**\r\n     * Add CSS class to this animation's elements\r\n     * before the animation begins.\r\n     */\r\n    beforeAddClass(className) {\r\n        (this._beforeAddClasses = this._beforeAddClasses || []).push(className);\r\n        return this;\r\n    }\r\n    /**\r\n     * Remove CSS class from this animation's elements\r\n     * before the animation begins.\r\n     */\r\n    beforeRemoveClass(className) {\r\n        (this._beforeRemoveClasses = this._beforeRemoveClasses || []).push(className);\r\n        return this;\r\n    }\r\n    /**\r\n     * Set CSS inline styles to this animation's elements\r\n     * before the animation begins.\r\n     */\r\n    beforeStyles(styles) {\r\n        this._beforeStyles = styles;\r\n        return this;\r\n    }\r\n    /**\r\n     * Clear CSS inline styles from this animation's elements\r\n     * before the animation begins.\r\n     */\r\n    beforeClearStyles(propertyNames) {\r\n        this._beforeStyles = this._beforeStyles || {};\r\n        for (const prop of propertyNames) {\r\n            this._beforeStyles[prop] = '';\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Add a function which contains DOM reads, which will run\r\n     * before the animation begins.\r\n     */\r\n    beforeAddRead(domReadFn) {\r\n        (this._readCallbacks = this._readCallbacks || []).push(domReadFn);\r\n        return this;\r\n    }\r\n    /**\r\n     * Add a function which contains DOM writes, which will run\r\n     * before the animation begins.\r\n     */\r\n    beforeAddWrite(domWriteFn) {\r\n        (this._writeCallbacks = this._writeCallbacks || []).push(domWriteFn);\r\n        return this;\r\n    }\r\n    /**\r\n     * Add CSS class to this animation's elements\r\n     * after the animation finishes.\r\n     */\r\n    afterAddClass(className) {\r\n        (this._afterAddClasses = this._afterAddClasses || []).push(className);\r\n        return this;\r\n    }\r\n    /**\r\n     * Remove CSS class from this animation's elements\r\n     * after the animation finishes.\r\n     */\r\n    afterRemoveClass(className) {\r\n        (this._afterRemoveClasses = this._afterRemoveClasses || []).push(className);\r\n        return this;\r\n    }\r\n    /**\r\n     * Set CSS inline styles to this animation's elements\r\n     * after the animation finishes.\r\n     */\r\n    afterStyles(styles) {\r\n        this._afterStyles = styles;\r\n        return this;\r\n    }\r\n    /**\r\n     * Clear CSS inline styles from this animation's elements\r\n     * after the animation finishes.\r\n     */\r\n    afterClearStyles(propertyNames) {\r\n        this._afterStyles = this._afterStyles || {};\r\n        for (const prop of propertyNames) {\r\n            this._afterStyles[prop] = '';\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Play the animation.\r\n     */\r\n    play(opts) {\r\n        // If the animation was already invalidated (it did finish), do nothing\r\n        if (this._destroyed) {\r\n            return;\r\n        }\r\n        // this is the top level animation and is in full control\r\n        // of when the async play() should actually kick off\r\n        // if there is no duration then it'll set the TO property immediately\r\n        // if there is a duration, then it'll stage all animations at the\r\n        // FROM property and transition duration, wait a few frames, then\r\n        // kick off the animation by setting the TO property for each animation\r\n        this._isAsync = this._hasDuration(opts);\r\n        // ensure all past transition end events have been cleared\r\n        this._clearAsync();\r\n        // recursively kicks off the correct progress step for each child animation\r\n        // ******** DOM WRITE ****************\r\n        this._playInit(opts);\r\n        // doubling up RAFs since this animation was probably triggered\r\n        // from an input event, and just having one RAF would have this code\r\n        // run within the same frame as the triggering input event, and the\r\n        // input event probably already did way too much work for one frame\r\n        raf(() => {\r\n            raf(() => {\r\n                this._playDomInspect(opts);\r\n            });\r\n        });\r\n    }\r\n    playAsync(opts) {\r\n        return new Promise(resolve => {\r\n            this.onFinish(resolve, { oneTimeCallback: true, clearExistingCallbacks: true });\r\n            this.play(opts);\r\n            return this;\r\n        });\r\n    }\r\n    playSync() {\r\n        // If the animation was already invalidated (it did finish), do nothing\r\n        if (!this._destroyed) {\r\n            const opts = { duration: 0 };\r\n            this._isAsync = false;\r\n            this._clearAsync();\r\n            this._playInit(opts);\r\n            this._playDomInspect(opts);\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    _playInit(opts) {\r\n        // always default that an animation does not tween\r\n        // a tween requires that an Animation class has an element\r\n        // and that it has at least one FROM/TO effect\r\n        // and that the FROM/TO effect can tween numeric values\r\n        this._hasTweenEffect = false;\r\n        this.isPlaying = true;\r\n        this.hasCompleted = false;\r\n        this._hasDur = (this.getDuration(opts) > DURATION_MIN);\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                // ******** DOM WRITE ****************\r\n                child._playInit(opts);\r\n            }\r\n        }\r\n        if (this._hasDur) {\r\n            // if there is a duration then we want to start at step 0\r\n            // ******** DOM WRITE ****************\r\n            this._progress(0);\r\n            // add the will-change properties\r\n            // ******** DOM WRITE ****************\r\n            this._willChange(true);\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     * NO RECURSION\r\n     * ROOT ANIMATION\r\n     */\r\n    _playDomInspect(opts) {\r\n        // fire off all the \"before\" function that have DOM READS in them\r\n        // elements will be in the DOM, however visibily hidden\r\n        // so we can read their dimensions if need be\r\n        // ******** DOM READ ****************\r\n        // ******** DOM WRITE ****************\r\n        this._beforeAnimation();\r\n        // for the root animation only\r\n        // set the async TRANSITION END event\r\n        // and run onFinishes when the transition ends\r\n        const dur = this.getDuration(opts);\r\n        if (this._isAsync) {\r\n            this._asyncEnd(dur, true);\r\n        }\r\n        // ******** DOM WRITE ****************\r\n        this._playProgress(opts);\r\n        if (this._isAsync && !this._destroyed) {\r\n            // this animation has a duration so we need another RAF\r\n            // for the CSS TRANSITION properties to kick in\r\n            raf(() => {\r\n                this._playToStep(1);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    _playProgress(opts) {\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                // ******** DOM WRITE ****************\r\n                child._playProgress(opts);\r\n            }\r\n        }\r\n        if (this._hasDur) {\r\n            // set the CSS TRANSITION duration/easing\r\n            // ******** DOM WRITE ****************\r\n            this._setTrans(this.getDuration(opts), false);\r\n        }\r\n        else {\r\n            // this animation does not have a duration, so it should not animate\r\n            // just go straight to the TO properties and call it done\r\n            // ******** DOM WRITE ****************\r\n            this._progress(1);\r\n            // since there was no animation, immediately run the after\r\n            // ******** DOM WRITE ****************\r\n            this._setAfterStyles();\r\n            // this animation has no duration, so it has finished\r\n            // other animations could still be running\r\n            this._didFinish(true);\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    _playToStep(stepValue) {\r\n        if (!this._destroyed) {\r\n            const children = this._childAnimations;\r\n            if (children) {\r\n                for (const child of children) {\r\n                    // ******** DOM WRITE ****************\r\n                    child._playToStep(stepValue);\r\n                }\r\n            }\r\n            if (this._hasDur) {\r\n                // browser had some time to render everything in place\r\n                // and the transition duration/easing is set\r\n                // now set the TO properties which will trigger the transition to begin\r\n                // ******** DOM WRITE ****************\r\n                this._progress(stepValue);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     * NO RECURSION\r\n     * ROOT ANIMATION\r\n     */\r\n    _asyncEnd(dur, shouldComplete) {\r\n        const self = this;\r\n        const onTransitionEnd = () => {\r\n            // congrats! a successful transition completed!\r\n            // ensure transition end events and timeouts have been cleared\r\n            self._clearAsync();\r\n            // ******** DOM WRITE ****************\r\n            self._playEnd();\r\n            // transition finished\r\n            self._didFinishAll(shouldComplete, true, false);\r\n        };\r\n        const onTransitionFallback = () => {\r\n            // oh noz! the transition end event didn't fire in time!\r\n            // instead the fallback timer when first\r\n            // if all goes well this fallback should never fire\r\n            // clear the other async end events from firing\r\n            self._timerId = undefined;\r\n            self._clearAsync();\r\n            // set the after styles\r\n            // ******** DOM WRITE ****************\r\n            self._playEnd(shouldComplete ? 1 : 0);\r\n            // transition finished\r\n            self._didFinishAll(shouldComplete, true, false);\r\n        };\r\n        // set the TRANSITION END event on one of the transition elements\r\n        self._unregisterTrnsEnd = transitionEnd(self._transEl(), onTransitionEnd);\r\n        // set a fallback timeout if the transition end event never fires, or is too slow\r\n        // transition end fallback: (animation duration + XXms)\r\n        self._timerId = setTimeout(onTransitionFallback, (dur + TRANSITION_END_FALLBACK_PADDING_MS));\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    _playEnd(stepValue) {\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                // ******** DOM WRITE ****************\r\n                child._playEnd(stepValue);\r\n            }\r\n        }\r\n        if (this._hasDur) {\r\n            if (stepValue !== undefined) {\r\n                // too late to have a smooth animation, just finish it\r\n                // ******** DOM WRITE ****************\r\n                this._setTrans(0, true);\r\n                // ensure the ending progress step gets rendered\r\n                // ******** DOM WRITE ****************\r\n                this._progress(stepValue);\r\n            }\r\n            // set the after styles\r\n            // ******** DOM WRITE ****************\r\n            this._setAfterStyles();\r\n            // remove the will-change properties\r\n            // ******** DOM WRITE ****************\r\n            this._willChange(false);\r\n        }\r\n    }\r\n    /**\r\n     * NO DOM\r\n     * RECURSION\r\n     */\r\n    _hasDuration(opts) {\r\n        if (this.getDuration(opts) > DURATION_MIN) {\r\n            return true;\r\n        }\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                if (child._hasDuration(opts)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * NO DOM\r\n     * RECURSION\r\n     */\r\n    _hasDomReads() {\r\n        if (this._readCallbacks && this._readCallbacks.length > 0) {\r\n            return true;\r\n        }\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                if (child._hasDomReads()) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Immediately stop at the end of the animation.\r\n     */\r\n    stop(stepValue = 1) {\r\n        // ensure all past transition end events have been cleared\r\n        this._clearAsync();\r\n        this._hasDur = true;\r\n        this._playEnd(stepValue);\r\n    }\r\n    /**\r\n     * NO DOM\r\n     * NO RECURSION\r\n     */\r\n    _clearAsync() {\r\n        if (this._unregisterTrnsEnd) {\r\n            this._unregisterTrnsEnd();\r\n        }\r\n        if (this._timerId) {\r\n            clearTimeout(this._timerId);\r\n        }\r\n        this._timerId = this._unregisterTrnsEnd = undefined;\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     * NO RECURSION\r\n     */\r\n    _progress(stepValue) {\r\n        // bread 'n butter\r\n        let val;\r\n        const elements = this._elements;\r\n        const effects = this._fxProperties;\r\n        if (!elements || elements.length === 0 || !effects || this._destroyed) {\r\n            return;\r\n        }\r\n        // flip the number if we're going in reverse\r\n        if (this._isReverse) {\r\n            stepValue = 1 - stepValue;\r\n        }\r\n        let i = 0;\r\n        let j = 0;\r\n        let finalTransform = '';\r\n        let fx;\r\n        for (i = 0; i < effects.length; i++) {\r\n            fx = effects[i];\r\n            if (fx.from && fx.to) {\r\n                const fromNum = fx.from.num;\r\n                const toNum = fx.to.num;\r\n                const tweenEffect = (fromNum !== toNum);\r\n                if (tweenEffect) {\r\n                    this._hasTweenEffect = true;\r\n                }\r\n                if (stepValue === 0) {\r\n                    // FROM\r\n                    val = fx.from.val;\r\n                }\r\n                else if (stepValue === 1) {\r\n                    // TO\r\n                    val = fx.to.val;\r\n                }\r\n                else if (tweenEffect) {\r\n                    // EVERYTHING IN BETWEEN\r\n                    const valNum = (((toNum - fromNum) * stepValue) + fromNum);\r\n                    const unit = fx.to.effectUnit;\r\n                    val = valNum + unit;\r\n                }\r\n                if (val !== null) {\r\n                    const prop = fx.effectName;\r\n                    if (fx.trans) {\r\n                        finalTransform += prop + '(' + val + ') ';\r\n                    }\r\n                    else {\r\n                        for (j = 0; j < elements.length; j++) {\r\n                            // ******** DOM WRITE ****************\r\n                            elements[j].style.setProperty(prop, val);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // place all transforms on the same property\r\n        if (finalTransform.length > 0) {\r\n            if (!this._isReverse && stepValue !== 1 || this._isReverse && stepValue !== 0) {\r\n                finalTransform += 'translateZ(0px)';\r\n            }\r\n            for (i = 0; i < elements.length; i++) {\r\n                // ******** DOM WRITE ****************\r\n                elements[i].style.setProperty('transform', finalTransform);\r\n                elements[i].style.setProperty('-webkit-transform', finalTransform);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     * NO RECURSION\r\n     */\r\n    _setTrans(dur, forcedLinearEasing) {\r\n        // Transition is not enabled if there are not effects\r\n        const elements = this._elements;\r\n        if (!elements || elements.length === 0 || !this._fxProperties) {\r\n            return;\r\n        }\r\n        // set the TRANSITION properties inline on the element\r\n        const easing = (forcedLinearEasing ? 'linear' : this.getEasing());\r\n        const durString = dur + 'ms';\r\n        for (const { style } of elements) {\r\n            if (dur > 0) {\r\n                // ******** DOM WRITE ****************\r\n                style.transitionDuration = durString;\r\n                // each animation can have a different easing\r\n                if (easing !== null) {\r\n                    // ******** DOM WRITE ****************\r\n                    style.transitionTimingFunction = easing;\r\n                }\r\n            }\r\n            else {\r\n                style.transitionDuration = '0';\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * DOM READ\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    _beforeAnimation() {\r\n        // fire off all the \"before\" function that have DOM READS in them\r\n        // elements will be in the DOM, however visibily hidden\r\n        // so we can read their dimensions if need be\r\n        // ******** DOM READ ****************\r\n        this._fireBeforeReadFunc();\r\n        // ******** DOM READS ABOVE / DOM WRITES BELOW ****************\r\n        // fire off all the \"before\" function that have DOM WRITES in them\r\n        // ******** DOM WRITE ****************\r\n        this._fireBeforeWriteFunc();\r\n        // stage all of the before css classes and inline styles\r\n        // ******** DOM WRITE ****************\r\n        this._setBeforeStyles();\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    _setBeforeStyles() {\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                child._setBeforeStyles();\r\n            }\r\n        }\r\n        const elements = this._elements;\r\n        // before the animations have started\r\n        // only set before styles if animation is not reversed\r\n        if (!elements || elements.length === 0 || this._isReverse) {\r\n            return;\r\n        }\r\n        const addClasses = this._beforeAddClasses;\r\n        const removeClasses = this._beforeRemoveClasses;\r\n        for (const el of elements) {\r\n            const elementClassList = el.classList;\r\n            // css classes to add before the animation\r\n            if (addClasses) {\r\n                for (const c of addClasses) {\r\n                    // ******** DOM WRITE ****************\r\n                    elementClassList.add(c);\r\n                }\r\n            }\r\n            // css classes to remove before the animation\r\n            if (removeClasses) {\r\n                for (const c of removeClasses) {\r\n                    // ******** DOM WRITE ****************\r\n                    elementClassList.remove(c);\r\n                }\r\n            }\r\n            // inline styles to add before the animation\r\n            if (this._beforeStyles) {\r\n                for (const [key, value] of Object.entries(this._beforeStyles)) {\r\n                    // ******** DOM WRITE ****************\r\n                    el.style.setProperty(key, value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * DOM READ\r\n     * RECURSION\r\n     */\r\n    _fireBeforeReadFunc() {\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                // ******** DOM READ ****************\r\n                child._fireBeforeReadFunc();\r\n            }\r\n        }\r\n        const readFunctions = this._readCallbacks;\r\n        if (readFunctions) {\r\n            for (const callback of readFunctions) {\r\n                // ******** DOM READ ****************\r\n                callback();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    _fireBeforeWriteFunc() {\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                // ******** DOM WRITE ****************\r\n                child._fireBeforeWriteFunc();\r\n            }\r\n        }\r\n        const writeFunctions = this._writeCallbacks;\r\n        if (writeFunctions) {\r\n            for (const callback of writeFunctions) {\r\n                // ******** DOM WRITE ****************\r\n                callback();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     */\r\n    _setAfterStyles() {\r\n        const elements = this._elements;\r\n        if (!elements) {\r\n            return;\r\n        }\r\n        for (const el of elements) {\r\n            const elementClassList = el.classList;\r\n            // remove the transition duration/easing\r\n            // ******** DOM WRITE ****************\r\n            el.style.transitionDuration = el.style.transitionTimingFunction = '';\r\n            if (this._isReverse) {\r\n                // finished in reverse direction\r\n                // css classes that were added before the animation should be removed\r\n                const beforeAddClasses = this._beforeAddClasses;\r\n                if (beforeAddClasses) {\r\n                    for (const c of beforeAddClasses) {\r\n                        elementClassList.remove(c);\r\n                    }\r\n                }\r\n                // css classes that were removed before the animation should be added\r\n                const beforeRemoveClasses = this._beforeRemoveClasses;\r\n                if (beforeRemoveClasses) {\r\n                    for (const c of beforeRemoveClasses) {\r\n                        elementClassList.add(c);\r\n                    }\r\n                }\r\n                // inline styles that were added before the animation should be removed\r\n                const beforeStyles = this._beforeStyles;\r\n                if (beforeStyles) {\r\n                    for (const propName of Object.keys(beforeStyles)) {\r\n                        // ******** DOM WRITE ****************\r\n                        el.style.removeProperty(propName);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // finished in forward direction\r\n                // css classes to add after the animation\r\n                const afterAddClasses = this._afterAddClasses;\r\n                if (afterAddClasses) {\r\n                    for (const c of afterAddClasses) {\r\n                        // ******** DOM WRITE ****************\r\n                        elementClassList.add(c);\r\n                    }\r\n                }\r\n                // css classes to remove after the animation\r\n                const afterRemoveClasses = this._afterRemoveClasses;\r\n                if (afterRemoveClasses) {\r\n                    for (const c of afterRemoveClasses) {\r\n                        // ******** DOM WRITE ****************\r\n                        elementClassList.remove(c);\r\n                    }\r\n                }\r\n                // inline styles to add after the animation\r\n                const afterStyles = this._afterStyles;\r\n                if (afterStyles) {\r\n                    for (const [key, value] of Object.entries(afterStyles)) {\r\n                        el.style.setProperty(key, value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     * NO RECURSION\r\n     */\r\n    _willChange(addWillChange) {\r\n        let wc;\r\n        const effects = this._fxProperties;\r\n        let willChange;\r\n        if (addWillChange && effects) {\r\n            wc = [];\r\n            for (const effect of effects) {\r\n                const propWC = effect.wc;\r\n                if (propWC === 'webkitTransform') {\r\n                    wc.push('transform', '-webkit-transform');\r\n                }\r\n                else if (propWC !== undefined) {\r\n                    wc.push(propWC);\r\n                }\r\n            }\r\n            willChange = wc.join(',');\r\n        }\r\n        else {\r\n            willChange = '';\r\n        }\r\n        const elements = this._elements;\r\n        if (elements) {\r\n            for (const el of elements) {\r\n                // ******** DOM WRITE ****************\r\n                el.style.setProperty('will-change', willChange);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Start the animation with a user controlled progress.\r\n     */\r\n    progressStart() {\r\n        // ensure all past transition end events have been cleared\r\n        this._clearAsync();\r\n        // ******** DOM READ/WRITE ****************\r\n        this._beforeAnimation();\r\n        // ******** DOM WRITE ****************\r\n        this._progressStart();\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    _progressStart() {\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                // ******** DOM WRITE ****************\r\n                child._progressStart();\r\n            }\r\n        }\r\n        // force no duration, linear easing\r\n        // ******** DOM WRITE ****************\r\n        this._setTrans(0, true);\r\n        // ******** DOM WRITE ****************\r\n        this._willChange(true);\r\n    }\r\n    /**\r\n     * Set the progress step for this animation.\r\n     * progressStep() is not debounced, so it should not be called faster than 60FPS.\r\n     */\r\n    progressStep(stepValue) {\r\n        // only update if the last update was more than 16ms ago\r\n        stepValue = Math.min(1, Math.max(0, stepValue));\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                // ******** DOM WRITE ****************\r\n                child.progressStep(stepValue);\r\n            }\r\n        }\r\n        // ******** DOM WRITE ****************\r\n        this._progress(stepValue);\r\n    }\r\n    /**\r\n     * End the progress animation.\r\n     */\r\n    progressEnd(shouldComplete, currentStepValue, dur = -1) {\r\n        if (this._isReverse) {\r\n            // if the animation is going in reverse then\r\n            // flip the step value: 0 becomes 1, 1 becomes 0\r\n            currentStepValue = 1 - currentStepValue;\r\n        }\r\n        const stepValue = shouldComplete ? 1 : 0;\r\n        const diff = Math.abs(currentStepValue - stepValue);\r\n        if (dur < 0) {\r\n            dur = this._duration || 0;\r\n        }\r\n        else if (diff < 0.05) {\r\n            dur = 0;\r\n        }\r\n        this._isAsync = (dur > 30);\r\n        this._progressEnd(shouldComplete, stepValue, dur, this._isAsync);\r\n        if (this._isAsync) {\r\n            // for the root animation only\r\n            // set the async TRANSITION END event\r\n            // and run onFinishes when the transition ends\r\n            // ******** DOM WRITE ****************\r\n            this._asyncEnd(dur, shouldComplete);\r\n            // this animation has a duration so we need another RAF\r\n            // for the CSS TRANSITION properties to kick in\r\n            if (!this._destroyed) {\r\n                raf(() => {\r\n                    this._playToStep(stepValue);\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    _progressEnd(shouldComplete, stepValue, dur, isAsync) {\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                // ******** DOM WRITE ****************\r\n                child._progressEnd(shouldComplete, stepValue, dur, isAsync);\r\n            }\r\n        }\r\n        if (!isAsync) {\r\n            // stop immediately\r\n            // set all the animations to their final position\r\n            // ******** DOM WRITE ****************\r\n            this._progress(stepValue);\r\n            this._willChange(false);\r\n            this._setAfterStyles();\r\n            this._didFinish(shouldComplete);\r\n        }\r\n        else {\r\n            // animate it back to it's ending position\r\n            this.isPlaying = true;\r\n            this.hasCompleted = false;\r\n            this._hasDur = true;\r\n            // ******** DOM WRITE ****************\r\n            this._willChange(true);\r\n            this._setTrans(dur, false);\r\n        }\r\n    }\r\n    /**\r\n     * Add a callback to fire when the animation has finished.\r\n     */\r\n    onFinish(callback, opts) {\r\n        if (opts && opts.clearExistingCallbacks) {\r\n            this._onFinishCallbacks = this._onFinishOneTimeCallbacks = undefined;\r\n        }\r\n        if (opts && opts.oneTimeCallback) {\r\n            this._onFinishOneTimeCallbacks = this._onFinishOneTimeCallbacks || [];\r\n            this._onFinishOneTimeCallbacks.push(callback);\r\n        }\r\n        else {\r\n            this._onFinishCallbacks = this._onFinishCallbacks || [];\r\n            this._onFinishCallbacks.push(callback);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * NO DOM\r\n     * RECURSION\r\n     */\r\n    _didFinishAll(hasCompleted, finishAsyncAnimations, finishNoDurationAnimations) {\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                child._didFinishAll(hasCompleted, finishAsyncAnimations, finishNoDurationAnimations);\r\n            }\r\n        }\r\n        if (finishAsyncAnimations && this._isAsync || finishNoDurationAnimations && !this._isAsync) {\r\n            this._didFinish(hasCompleted);\r\n        }\r\n    }\r\n    /**\r\n     * NO RECURSION\r\n     */\r\n    _didFinish(hasCompleted) {\r\n        this.isPlaying = false;\r\n        this.hasCompleted = hasCompleted;\r\n        if (this._onFinishCallbacks) {\r\n            // run all finish callbacks\r\n            for (const callback of this._onFinishCallbacks) {\r\n                callback(this);\r\n            }\r\n        }\r\n        if (this._onFinishOneTimeCallbacks) {\r\n            // run all \"onetime\" finish callbacks\r\n            for (const callback of this._onFinishOneTimeCallbacks) {\r\n                callback(this);\r\n            }\r\n            this._onFinishOneTimeCallbacks.length = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Reverse the animation.\r\n     */\r\n    reverse(shouldReverse = true) {\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                child.reverse(shouldReverse);\r\n            }\r\n        }\r\n        this._isReverse = !!shouldReverse;\r\n        return this;\r\n    }\r\n    /**\r\n     * Recursively destroy this animation and all child animations.\r\n     */\r\n    destroy() {\r\n        this._didFinish(false);\r\n        this._destroyed = true;\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                child.destroy();\r\n            }\r\n        }\r\n        this._clearAsync();\r\n        if (this._elements) {\r\n            this._elements.length = 0;\r\n        }\r\n        if (this._readCallbacks) {\r\n            this._readCallbacks.length = 0;\r\n        }\r\n        if (this._writeCallbacks) {\r\n            this._writeCallbacks.length = 0;\r\n        }\r\n        this.parent = undefined;\r\n        if (this._childAnimations) {\r\n            this._childAnimations.length = 0;\r\n        }\r\n        if (this._onFinishCallbacks) {\r\n            this._onFinishCallbacks.length = 0;\r\n        }\r\n        if (this._onFinishOneTimeCallbacks) {\r\n            this._onFinishOneTimeCallbacks.length = 0;\r\n        }\r\n    }\r\n    /**\r\n     * NO DOM\r\n     */\r\n    _transEl() {\r\n        // get the lowest level element that has an Animator\r\n        const children = this._childAnimations;\r\n        if (children) {\r\n            for (const child of children) {\r\n                const targetEl = child._transEl();\r\n                if (targetEl) {\r\n                    return targetEl;\r\n                }\r\n            }\r\n        }\r\n        return (this._hasTweenEffect &&\r\n            this._hasDur &&\r\n            this._elements !== undefined &&\r\n            this._elements.length > 0 ?\r\n            this._elements[0] : null);\r\n    }\r\n}\n\nconst create = (animationBuilder, baseEl, opts) => {\r\n    if (animationBuilder) {\r\n        return animationBuilder(Animator, baseEl, opts);\r\n    }\r\n    return Promise.resolve(new Animator());\r\n};\n\nexport { create };\n"],"sourceRoot":"webpack:///"}