{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-nav_5.entry.js"],"names":[],"mappings":";;sRAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,UAAA,CAAA,MAAA,CAAA,GAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,cAAA,CAAA,UAAA,CAAA,MAAA,CAAA,OAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,aAAA,CAAA,UAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,cAAA,CAAA,UAAA,CAAA,MAAA,CAAA,OAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA,oBAAA,GAAA,CAAA,8CAAA,CAAA,mBAAA,CAAA,yBAAA,sDAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,gDAAA,CAAA,mBAAA,CAAA,2BAAA,wDAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,mDAAA,CAAA,mBAAA,CAAA,8BAAA,2DAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,iDAAA,CAAA,mBAAA,CAAA,4BAAA,yDAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,4DAAA,CAAA,mBAAA,CAAA,uCAAA,oEAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,+CAAA,CAAA,mBAAA,CAAA,0BAAA,uDAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,sDAAA,CAAA,mBAAA,CAAA,iCAAA,8DAAA,CAAA,CAQA,GAAA,CAAA,cAAA,CAAA,CAAA,CACA,GAAA,CAAA,mBAAA,CAAA,CAAA,CACA,GAAA,CAAA,oBAAA,CAAA,CAAA,C,GACA,CAAA,c,yBACA,wBAAA,SAAA,CAAA,MAAA,CAAA,CACA,KAAA,SAAA,CAAA,SAAA,CACA,KAAA,MAAA,CAAA,MAAA,CACA,KAAA,KAAA,CAAA,cACA,C,2CACA,I,0FAAA,iBAAA,SAAA,+HACA,KAAA,KAAA,CAAA,mBAAA,CADA,GAEA,KAAA,OAFA,wBAGA,SAHA,CAGA,KAAA,SAHA,uBAIiC,CAAA,MAAA,CAAA,4DAAA,CAAA,GAAA,CAAA,CAAA,CAAe,KAAA,QAAf,CAAe,SAAf,CAAe,SAAf,CAAe,CAAA,UAAA,CAAA,oBAAA,CAAf,CAAe,KAAA,MAAf,CAJjC,QAIA,KAAA,OAJA,yE,sEAOA;;eAGA,Q,CAAA,mBAAA,CACQ,MAAA,CAAA,iDAAA,CAAA,GAAA,CAAA,CAAA,CAAM,KAAA,KAAA,GAAA,oBAAN,CAAM,6BAAN,EACR,GAAA,CAAA,OAAA,CAAA,KAAA,OAAA,CACA,GAAA,OAAA,CAAA,CACA,GAAA,KAAA,QAAA,CAAA,CACA,KAAA,QAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,OAAA,CACA,CAFA,IAGA,CACA,OAAA,CAAA,MAAA,EACA,CACA,CACA,KAAA,GAAA,CAAA,SAAA,CACA,KAAA,KAAA,CAAA,oBACA,C,0BAEA,GAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,CACA,GAAA,CAAA,IAAA,CAAA,CACA,MAAA,MACA,CACA,GAAA,IAAA,CAAA,SAAA,GAAA,EAAA,CAAA,CACA,MAAA,MACA,CACA,GAAA,CAAA,aAAA,CAAA,IAAA,CAAA,MAAA,CACA,GAAA,aAAA,GAAA,MAAA,CAAA,CACA,MAAA,KACA,CACA,GAAA,CAAA,aAAA,EAAA,CAAA,MAAA,CAAA,CACA,MAAA,KACA,CACA,GAAA,CAAA,aAAA,EAAA,CAAA,MAAA,CAAA,CACA,MAAA,MACA,CACA,GAAA,CAAA,KAAA,CAAA,MAAA,CAAA,IAAA,CAAA,aAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CACA,GAAA,KAAA,CAAA,MAAA,GAAA,KAAA,CAAA,MAAA,CAAA,CACA,MAAA,MACA,CACA;AACA,oBAAA,KAAA,uBAAA,CAAA,GAAA,CAAA,GAAA,WAAA,CACA,GAAA,aAAA,CAAA,GAAA,CAAA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,CACA,MAAA,MACA,CACA,CACA,MAAA,KACA,CA7BA,CA8BA,GAAA,CAAA,aAAA,CAAA,QAAA,CAAA,aAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CACA,GAAA,CAAA,IAAA,CAAA,CACA,MAAA,KACA,CACA,GAAA,IAAA,WAAA,CAAA,cAAA,CAAA,CACA,MAAA,CAAA,IACA,CACA,MAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,MAAA,CACA,CARA,CASA,GAAA,CAAA,cAAA,CAAA,QAAA,CAAA,cAAA,CAAA,KAAA,CAAA,CACA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAA,CACA,GAAA,IAAA,WAAA,CAAA,cAAA,CAAA,CACA,MAAA,CAAA,IACA,CACA,GAAA,QAAA,CAAA,IAAA,CAAA,CACA,MAAA,CAAA,aAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CACA,CACA,MAAA,CAAA,aAAA,CAAA,IAAA,CAAA,SAAA,CACK,CARL,EAQK,MARL,CAQK,SAAA,CAAA,QAAA,CAAA,CAAA,GAAA,IAAA,CARL,CASA,CAVA,CAYA,GAAA,CAAA,GAAA,yBACA,aAAA,OAAA,CAAA,CACQ,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAgB,IAAhB,CAAgB,OAAhB,EACR,KAAA,UAAA,CAAA,EAAA,CACA,KAAA,gBAAA,CAAA,IAAA,CACA,KAAA,SAAA,CAAA,KAAA,CACA,KAAA,eAAA,CAAA,KAAA,CACA,KAAA,SAAA,CAAA,KAAA,CACA,KAAA,KAAA,CAAA,EAAA,CACA;;WAGA,KAAA,QAAA,CAAA,IAAA,CACA,KAAA,cAAA,CAA8B,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAW,IAAX,CAAW,gBAAX,CAAW,CAAX,CAA9B,CACA,KAAA,gBAAA,CAAgC,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAW,IAAX,CAAW,kBAAX,CAAW,CAAX,CAAhC,CACA,KAAA,eAAA,CAA+B,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAW,IAAX,CAAW,iBAAX,CAAW,CAAX,CAC/B,CAhBA,kCAiBA,mBAjBA,CAiBA,8BAAA,CACA,GAAA,KAAA,OAAA,CAAA,CACA,KAAA,OAAA,CAAA,WAAA,CAAA,KAAA,YAAA,GAAA,IAAA,CACA,CACA,CArBA,SAsBA,WAtBA,CAsBA,sBAAA,CACA,GAAA,KAAA,IAAA,GAAA,SAAA,CAAA,CACA,GAAA,CAAA,KAAA,SAAA,CAAA,CACA,KAAA,OAAA,CAAA,KAAA,IAAA,CAAA,KAAA,UAAA,CACA,CACA,CACA,CA5BA,SA6BA,iBA7BA,CA6BA,4BAAA,CACA,KAAA,SAAA,CACA,CAAA,CAAA,QAAA,CAAA,aAAA,CAAA,YAAA,CAAA,EACA,CAAA,KAAA,EAAA,CAAA,OAAA,CAAA,aAAA,CAFA,CAGA,GAAA,KAAA,YAAA,GAAA,SAAA,CAAA,CACA,GAAA,CAAA,IAAA,CAAyB,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAU,IAAV,CAAzB,CACA,KAAA,YAAA,CAAgC,gDAAA,CAAA,GAAA,CAAA,CAAM,UAAN,CAAM,kBAAN,CAAM,IAAA,GAAA,KAAN,CAChC,CACA,KAAA,cAAA,CAAA,IAAA,EACA,CAtCA,SAuCA,gBAvCA,sGAuCA,uIACA,KAAA,WAAA,GADA,uBAE8B,CAAA,mBAAA,CAAA,CAAA,CAAA,wCAAA,wBAAA,EAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,+BAAA,4DAAA,CAAA,CAF9B,qBAEgE,KAAA,EAFhE,cAEgE,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAFhE,cAEgE,KAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAFhE,cAEgE,KAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAFhE,cAEgE,KAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAFhE,CAEA,KAAA,OAFA,gBAEgE,sBAFhE,mEAGA,KAAA,mBAAA,GAHA,6DAvCA,iHA4CA,kBA5CA,CA4CA,6BAAA,CACA,kBAAA,KAAA,KAAA,qGAAA,0IAAA,CAAA,IAAA,MACY,MAAA,CAAA,+CAAA,CAAA,GAAA,CAAA,CAAA,CAAS,IAAA,CAAA,OAAT,CAAwB,mDAAA,CAAA,GAAA,CAAxB,EACZ,IAAA,CAAA,QAAA,EACA,CACA,GAAA,KAAA,OAAA,CAAA,CACA,KAAA,OAAA,CAAA,OAAA,GACA,KAAA,OAAA,CAAA,SACA,CACA;AACA,KAAA,UAAA,CAAA,MAAA,CAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CACA,KAAA,SAAA,CAAA,IACA,CACA;;;;;;;;;OAzDA,SAmEA,IAnEA,CAmEA,cAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CACA,MAAA,MAAA,SAAA,CAAA,CACA,WAAA,CAAA,CAAA,CADA,CAEA,WAAA,CAAA,CAAA,CAA2B,IAAA,CAAA,SAA3B,CAA2B,MAAA,CAAA,cAA3B,CAAA,CAFA,CAGA,IAAA,CAAA,IAHA,CAAA,CAIS,IAJT,CAKA,CACA;;;;;;;;;OA1EA,SAoFA,MApFA,CAoFA,gBAAA,WAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CACA,MAAA,MAAA,SAAA,CAAA,CACA,WAAA,CAAA,WADA,CAEA,WAAA,CAAA,CAAA,CAA2B,IAAA,CAAA,SAA3B,CAA2B,MAAA,CAAA,cAA3B,CAAA,CAFA,CAGA,IAAA,CAAA,IAHA,CAAA,CAIS,IAJT,CAKA,CACA;;;;;;;;;OA3FA,SAqGA,WArGA,CAqGA,qBAAA,WAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CACA,MAAA,MAAA,SAAA,CAAA,CACA,WAAA,CAAA,WADA,CAEA,WAAA,CAAA,gBAFA,CAGA,IAAA,CAAA,IAHA,CAAA,CAIS,IAJT,CAKA,CACA;;;;;;OA5GA,SAmHA,GAnHA,CAmHA,aAAA,IAAA,CAAA,IAAA,CAAA,CACA,MAAA,MAAA,SAAA,CAAA,CACA,WAAA,CAAA,CAAA,CADA,CAEA,WAAA,CAAA,CAFA,CAGA,IAAA,CAAA,IAHA,CAAA,CAIS,IAJT,CAKA,CACA;;;;;;OA1HA,SAiIA,KAjIA,CAiIA,eAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CACA,GAAA,CAAA,QAAA,CAAA,CACA,WAAA,CAAA,CAAA,CADA,CAEA,WAAA,CAAA,CAAA,CAFA,CAGA,IAAA,CAAA,IAHA,CAAA,CAKA,GAAA,MAAA,CAAA,eAAA,GAAA,QAAA,EAAA,eAAA,CAAA,SAAA,CAAA,CACA,QAAA,CAAA,UAAA,CAAA,eAAA,CACA,QAAA,CAAA,WAAA,CAAA,CACA,CAHA,IAIA,IAAA,MAAA,CAAA,eAAA,GAAA,QAAA,CAAA,CACA,QAAA,CAAA,WAAA,CAAA,eAAA,CAAA,CACA,CACA,MAAA,MAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CACA,CACA;;;;;OAhJA,SAsJA,SAtJA,CAsJA,mBAAA,IAAA,CAAA,IAAA,CAAA,CACA,MAAA,MAAA,SAAA,CAAA,CACA,WAAA,CAAA,CADA,CAEA,WAAA,CAAA,CAAA,CAFA,CAGA,IAAA,CAAA,IAHA,CAAA,CAIS,IAJT,CAKA,CACA;;;;;;;OA7JA,SAqKA,WArKA,CAqKA,qBAAA,UAAA,CAAA,WAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,WAAA,WAAA,WAAA,CAAA,CAAA,CACA,MAAA,MAAA,SAAA,CAAA,CACA,WAAA,CAAA,UADA,CAEA,WAAA,CAAA,WAFA,CAGA,IAAA,CAAA,IAHA,CAAA,CAIS,IAJT,CAKA,CACA;;;;;;;OA5KA,SAoLA,OApLA,CAoLA,iBAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CACA,MAAA,MAAA,QAAA,CAAA,CAAA,CAA+B,IAAA,CAAA,SAA/B,CAA+B,MAAA,CAAA,cAA/B,CAAA,CAAA,CAAyE,IAAzE,CAAyE,IAAzE,CACA,CACA;;;;;;;;;OAvLA,SAiMA,QAjMA,CAiMA,kBAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CACA,GAAA,IAAA,EAAA,IAAA,CAAA,CACA,IAAA,CAAA,EACA,CACA;AACA,GAAA,IAAA,CAAA,QAAA,GAAA,IAAA,CAAA,CACA,IAAA,CAAA,QAAA,CAAA,KACA,CACA,MAAA,MAAA,SAAA,CAAA,CACA,WAAA,CAAA,CADA,CAEA,WAAA,CAAA,KAFA,CAGA,WAAA,CAAA,CAHA,CAIA,WAAA,CAAA,CAAA,CAJA,CAKA,IAAA,CAAA,IALA,CAAA,CAMS,IANT,CAOA,CACA,gBAjNA,SAkNA,UAlNA,CAkNA,oBAAA,EAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,KAAA,aAAA,EAAA,CACA,GAAA,OAAA,CAAA,MAAA,CAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CACA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CACA,OAAA,CAAA,KADA,CAEA,OAAA,CAAA,MAAA,CAAA,OAFA,CAAA,CAIA,CACA,GAAA,CAAA,OAAA,CACA,GAAA,CAAA,OAAA,CAAA,GAAA,CAAA,OAAA,CAAA,SAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CACA,GAAA,CAAA,MAAA,CACA,GAAA,CAAA,UAAA,CAAA,CACA,SAAA,CAAA,KADA,CAEA,WAAA,CAAA,qBAAA,UAAA,CAAA,CACA,GAAA,CAAA,IAAA,CACA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,OAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CACA,OAAA,CAAA,CACA,OAAA,CAAA,IADA,CAEA,OAAA,CAAA,UAFA,CAGA,WAAA,oFAAA,uIACA,IAAA,GADA,uBAEA,CAAA,MAFA,wDAAA,yFAHA,CAAA,CAAA,CAQA,MAAA,CAAA,CACA,CAdA,CAAA,CAgBA,GAAA,SAAA,GAAA,MAAA,CAAA,CACA,MAAA,CAAA,KAAA,OAAA,CAAA,EAAA,CAAA,MAAA,CAAA,UAAA,CACA,CAFA,IAGA,CACA,GAAA,CAAA,cAAA,CAAA,KAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CACA,GAAA,cAAA,CAAA,CACA,MAAA,CAAA,KAAA,KAAA,CAAA,cAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,CAAoE,UAApE,CAAoE,CAAe,SAAA,CAAA,MAAf,CAApE,CAAA,CACA,CAFA,IAGA,IAAA,SAAA,GAAA,SAAA,CAAA,CACA,MAAA,CAAA,KAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,UAAA,CACA,CAFA,IAGA,IAAA,SAAA,GAAA,MAAA,CAAA,CACA,MAAA,CAAA,KAAA,OAAA,CAAA,EAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,CAAkE,UAAlE,CAAkE,CAAe,SAAA,CAAA,MAAf,CAAe,QAAA,CAAA,IAAf,CAAlE,CAAA,CACA,CACA,CACA,MAAA,CAAA,OACA,CACA,gBA9PA,SA+PA,UA/PA,gGA+PA,kJACA,MADA,CACA,KAAA,aAAA,EADA,kCAEA,MAAA,CACA,CACA,EAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OADA,CAEA,MAAA,CAAA,MAAA,CAAA,MAFA,CAGA,OAAA,CAAA,MAAA,CAAA,OAHA,CADA,CAMA,SARA,8DA/PA,sFAyQA;;OAzQA,SA4QA,SA5QA,CA4QA,oBAAA,CACA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,KAAA,aAAA,EAAA,CACA,CACA;;;;OA/QA,SAoRA,UApRA,CAoRA,oBAAA,KAAA,CAAA,CACA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,KAAA,KAAA,CAAA,KAAA,CAAA,CACA,CACA;;;;OAvRA,SA4RA,SA5RA,CA4RA,mBAAA,IAAA,CAAA,CACA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,KAAA,aAAA,CAAA,IAAA,CAAA,CACA,CACA;;;;OA/RA,SAoSA,WApSA,CAoSA,qBAAA,IAAA,CAAA,CACA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,KAAA,eAAA,CAAA,IAAA,CAAA,CACA,CAtSA,SAuSA,SAvSA,CAuSA,oBAAA,CACA,MAAA,MAAA,KAAA,CAAA,MACA,CAzSA,SA0SA,aA1SA,CA0SA,wBAAA,CACA,MAAA,MAAA,KAAA,CAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CACA,CA5SA,SA6SA,aA7SA,CA6SA,uBAAA,IAAA,CAAA,IAAA,IAAA,WAAA,IAAA,CAAA,KAAA,aAAA,EAAA,CACA,MAAA,CAAA,EAAA,IAAA,EAAA,KAAA,eAAA,CAAA,IAAA,CAAA,CACA,CA/SA,SAgTA,eAhTA,CAgTA,yBAAA,IAAA,CAAA,IAAA,IAAA,WAAA,IAAA,CAAA,KAAA,aAAA,EAAA,CACA,GAAA,CAAA,IAAA,CAAA,CACA,MAAA,CAAA,SACA,CACA,GAAA,CAAA,KAAA,CAAA,KAAA,KAAA,CACA,GAAA,CAAA,KAAA,CAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CACA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,SACA,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjUA,SAkUA,SAlUA,CAkUA,mBAAA,EAAA,CAAA,IAAA,CAAA,CACA,GAAA,KAAA,eAAA,EAAA,EAAA,CAAA,IAAA,EAAA,IAAA,EAAA,EAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CACA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,KAAA,CACA,CACA,GAAA,CAAA,OAAA,CAAA,GAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,MAAA,CAAA,CACA,EAAA,CAAA,OAAA,CAAA,OAAA,CACA,EAAA,CAAA,MAAA,CAAA,MACS,CAHT,CAAA,CAIA,EAAA,CAAA,IAAA,CAAA,IAAA,CACA;AACA,GAAA,EAAA,CAAA,WAAA,EAAA,EAAA,CAAA,WAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CACA,EAAA,CAAA,WAAA,CAAA,SACA,CACA;AACA,KAAA,UAAA,CAAA,IAAA,CAAA,EAAA,EACA;AACA;AACA,KAAA,QAAA,GACA,MAAA,CAAA,OACA,CArVA,SAsVA,OAtVA,CAsVA,iBAAA,MAAA,CAAA,EAAA,CAAA,CACA,GAAA,KAAA,SAAA,CAAA,CACA,KAAA,SAAA,CAAA,8BAAA,CAAA,EAAA,EACA,MACA,CACA,GAAA,EAAA,CAAA,IAAA,CAAA,CACA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,YAAA,CAAA,MAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,YAAA,CAAA,MAAA,CAAA,WAAA,CAAA,MAAA,CAAA,SAAA,CACA,CACA,EAAA,CAAA,OAAA,CAAA,MAAA,CAAA,YAAA,EACA,GAAA,EAAA,CAAA,IAAA,CAAA,SAAA,GAAA,KAAA,EAAA,KAAA,SAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,QAAA,CAAA,aAAA,CAAA,YAAA,CAAA,CACA,GAAA,MAAA,CAAA,CACA,GAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,GAAA,MAAA,CAAA,MAAA,CAAA,SAAA,CACA,MAAA,CAAA,UAAA,CAAA,SAAA,CACA,CACA,CACA,CAtWA,SAuWA,MAvWA,CAuWA,gBAAA,YAAA,CAAA,EAAA,CAAA,CACA,GAAA,KAAA,SAAA,CAAA,CACA,KAAA,SAAA,CAAA,8BAAA,CAAA,EAAA,EACA,MACA,CACA,KAAA,UAAA,CAAA,MAAA,CAAA,CAAA,CACA,KAAA,SAAA,CAAA,YAAA,CAAA,EAAA,CACA,CA9WA,SA+WA,SA/WA,CA+WA,mBAAA,YAAA,CAAA,EAAA,CAAA,CACA,GAAA,EAAA,CAAA,IAAA,CAAA,CACA,EAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,YAAA,CACA,CACA,GAAA,EAAA,CAAA,MAAA,EAAA,CAAA,KAAA,SAAA,CAAA,CACA,EAAA,CAAA,MAAA,CAAA,YAAA,CACA,CAFA,IAGA,CACA,EAAA,CAAA,OAAA,CAAA,KAAA,CACA,CACA,CAzXA,SA0XA,QA1XA,CA0XA,mBAAA,CACA;AACA;AACA,GAAA,KAAA,eAAA,CAAA,CACA,MAAA,MACA,CACA;AACA;AACA,GAAA,CAAA,EAAA,CAAA,KAAA,UAAA,CAAA,KAAA,EAAA,CACA,GAAA,CAAA,EAAA,CAAA,CACA,MAAA,MACA,CACA,KAAA,aAAA,CAAA,EAAA,EACA,MAAA,KACA,CAxYA,SAyYA,aAzYA,mGAyYA,kBAAA,EAAA,6LAEA;AACA,KAAA,gBAAA,CAAA,IAAA,GACA,KAAA,eAAA,CAAA,IAAA,CACA,KAAA,SAAA,CAAA,EAAA,EACA,WANA,CAMA,KAAA,aAAA,EANA,CAOA,YAPA,CAOA,KAAA,eAAA,CAAA,EAAA,CAAA,WAAA,CAPA,MAQA,CAAA,WAAA,EAAA,CAAA,YARA,+BASA,IAAA,CAAA,KAAA,CAAA,qCAAA,CATA,aAWA,YAAA,EAAA,YAAA,CAAA,KAAA,GAAA,cAXA,mDAYA,CAAA,YAAA,CAAA,IAAA,CAAA,KAAA,EAAA,CAZA,SAcA,KAAA,YAAA,CAAA,YAAA,CAAA,WAAA,CAAA,EAAA,EACA;AACA,kBAhBA,CAgBA,CAAA,EAAA,CAAA,0BAAA,EAAA,EAAA,CAAA,yBAAA,GACA,YAAA,GAAA,WAjBA,KAkBA,kBAlBA,kDAmBA,MAAA,UAAA,CAAA,YAAA,CAAA,WAAA,CAAA,EAAA,CAnBA,kFAoBA,CACA;AACA;AACA;AACA;AACA,YAAA,CAAA,IALA,CAMA,kBAAA,CAAA,KANA,CApBA,SAkBA,MAlBA,cA4BA,KAAA,OAAA,CAAA,MAAA,CAAA,EAAA,EACA,KAAA,eAAA,CAAA,IAAA,GA7BA,qFAgCA,KAAA,MAAA,cAAA,EAAA,EAhCA,QAkCA,KAAA,eAAA,CAAA,KAAA,CACA,KAAA,QAAA,GAnCA,sEAzYA,2GA8aA,SA9aA,CA8aA,mBAAA,EAAA,CAAA,CACA,GAAA,CAAA,WAAA,CAAA,KAAA,KAAA,CAAA,MAAA,CACA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CACA,GAAA,EAAA,CAAA,IAAA,CAAA,QAAA,GAAA,SAAA,CAAA,CACA,EAAA,CAAA,IAAA,CAAA,QAAA,CAAA,KAAA,QACA,CACA,GAAA,EAAA,CAAA,UAAA,GAAA,SAAA,CAAA,CACY,MAAA,CAAA,iDAAA,CAAA,GAAA,CAAA,CAAA,CAAM,EAAA,CAAA,WAAA,GAAA,SAAN,CAAM,8BAAN,EACA,MAAA,CAAA,iDAAA,CAAA,GAAA,CAAA,CAAA,CAAM,EAAA,CAAA,WAAA,GAAA,SAAN,CAAM,8BAAN,EACZ,GAAA,CAAA,KAAA,CAAA,KAAA,KAAA,CAAA,OAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CACA,GAAA,KAAA,CAAA,CAAA,CAAA,CACA,KAAA,IAAA,CAAA,KAAA,CAAA,0BAAA,CACA,CACA,EAAA,CAAA,WAAA,EAAA,KACA,CACA,GAAA,EAAA,CAAA,WAAA,GAAA,SAAA,CAAA,CACA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CACA,EAAA,CAAA,WAAA,CAAA,WAAA,CAAA,CACA,CACA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CACA,EAAA,CAAA,WAAA,CAAA,WAAA,CAAA,EAAA,CAAA,WACA,CACA,EAAA,CAAA,yBAAA,CACA,EAAA,CAAA,WAAA,CAAA,CAAA,EAAA,EAAA,CAAA,WAAA,CAAA,EAAA,CAAA,WAAA,GAAA,WACA,CACA,GAAA,EAAA,CAAA,WAAA,CAAA,CACA;AACA;AACA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,EAAA,EAAA,CAAA,WAAA,CAAA,WAAA,CAAA,CACA,EAAA,CAAA,WAAA,CAAA,WACA,CACA,EAAA,CAAA,0BAAA,CAAA,EAAA,CAAA,WAAA,GAAA,WACA,CACA,GAAA,CAAA,WAAA,CAAA,EAAA,CAAA,WAAA,CACA,GAAA,CAAA,WAAA,CAAA,CACA,MACA,CACQ,MAAA,CAAA,iDAAA,CAAA,GAAA,CAAA,CAAA,CAAM,WAAA,CAAA,MAAA,CAAA,CAAN,CAAM,wBAAN,EACR,GAAA,CAAA,eAAA,CAAA,cAAA,CAAA,WAAA,CAAA,CACA,GAAA,eAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CACA,KAAA,IAAA,CAAA,KAAA,CAAA,yBAAA,CACA,CACA;AACA,mBAAA,eAAA,2GAAA,iJAAA,CAAA,IAAA,OACA,IAAA,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,QAAA,CACA,GAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CACA,GAAA,GAAA,EAAA,GAAA,GAAA,IAAA,CAAA,CACA,KAAA,IAAA,CAAA,KAAA,CAAA,oCAAA,CACA,CACA,GAAA,IAAA,CAAA,KAAA,GAAA,oBAAA,CAAA,CACA,KAAA,IAAA,CAAA,KAAA,CAAA,qCAAA,CACA,CACA,CACA,EAAA,CAAA,WAAA,CAAA,eACA,CApeA,SAqeA,eAreA,CAqeA,yBAAA,EAAA,CAAA,WAAA,CAAA,CACA,GAAA,CAAA,WAAA,CAAA,EAAA,CAAA,WAAA,CACA,GAAA,WAAA,GAAA,SAAA,CAAA,CACA;AACA;AACA,MAAA,CAAA,WAAA,CAAA,WAAA,CAAA,MAAA,CAAA,CAAA,CACA,CACA,GAAA,CAAA,WAAA,CAAA,EAAA,CAAA,WAAA,CACA,GAAA,WAAA,GAAA,SAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,KAAA,KAAA,CACA,GAAA,CAAA,SAAA,CAAA,WAAA,CAAA,EAAA,CAAA,WAAA,CACA,IAAA,GAAA,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAA0C,CAAA,EAAA,CAA1C,CAAkD,CAAA,EAAlD,CAAkD,CAClD,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,WAAA,EAAA,CAAA,EAAA,SAAA,GAAA,IAAA,GAAA,WAAA,CAAA,CACA,MAAA,CAAA,IACA,CACA,CACA,CACA,MAAA,CAAA,SACA,CAxfA,SAyfA,YAzfA,CAyfA,sBAAA,YAAA,CAAA,WAAA,CAAA,EAAA,CAAA,CACQ,MAAA,CAAA,iDAAA,CAAA,GAAA,CAAA,CAAA,CAAM,WAAA,EAAA,YAAN,CAAM,4CAAN,EACA,MAAA,CAAA,iDAAA,CAAA,GAAA,CAAA,CAAA,CAAM,EAAA,CAAA,OAAN,CAAM,uBAAN,EACA,MAAA,CAAA,iDAAA,CAAA,GAAA,CAAA,CAAA,CAAM,EAAA,CAAA,MAAN,CAAM,sBAAN,EACR,GAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CACA,GAAA,CAAA,WAAA,CAAA,EAAA,CAAA,WAAA,CACA,GAAA,CAAA,WAAA,CAAA,EAAA,CAAA,WAAA,CACA,GAAA,CAAA,WAAA,CAAA,EAAA,CAAA,WAAA,CACA,GAAA,CAAA,YAAA,CACA;AACA,GAAA,WAAA,GAAA,SAAA,EAAA,WAAA,GAAA,SAAA,CAAA,CACY,MAAA,CAAA,iDAAA,CAAA,GAAA,CAAA,CAAA,CAAM,WAAA,EAAA,CAAN,CAAM,iCAAN,EACA,MAAA,CAAA,iDAAA,CAAA,GAAA,CAAA,CAAA,CAAM,WAAA,EAAA,CAAN,CAAM,iCAAN,EACZ,YAAA,CAAA,EAAA,CACA,IAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAA2B,CAAA,CAAA,WAA3B,CAA4C,CAAA,EAA5C,CAA4C,CAC5C,GAAA,CAAA,IAAA,CAAA,KAAA,KAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CACA,GAAA,IAAA,EAAA,IAAA,GAAA,YAAA,EAAA,IAAA,GAAA,WAAA,CAAA,CACA,YAAA,CAAA,IAAA,CAAA,IAAA,CACA,CACA,CACA;AACA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,SAAA,EAAA,MACA,CACA,GAAA,CAAA,YAAA,CAAA,KAAA,KAAA,CAAA,MAAA,EACA,WAAA,GAAA,SAAA,CAAA,WAAA,CAAA,MAAA,CAAA,CADA,GAEA,WAAA,GAAA,SAAA,CAAA,WAAA,CAAA,CAFA,CAAA,CAGQ,MAAA,CAAA,iDAAA,CAAA,GAAA,CAAA,CAAA,CAAM,YAAA,EAAA,CAAN,CAAM,mCAAN,EACR,GAAA,YAAA,GAAA,CAAA,CAAA,CACA,OAAA,CAAA,IAAA,wGAAA,IAAA,CAAA,KAAA,EAAA,EACA,KAAA,IAAA,CAAA,KAAA,CAAA,+CAAA,CACA,CACA;AACA;AACA,GAAA,WAAA,CAAA,CACA;AACA,GAAA,CAAA,WAAA,CAAA,EAAA,CAAA,WAAA,CACA,mBAAA,WAAA,2GAAA,iJAAA,CAAA,KAAA,OACA,KAAA,YAAA,CAAA,KAAA,CAAA,WAAA,EACA,WAAA,EACA,CACA,GAAA,EAAA,CAAA,0BAAA,CAAA,CACA;AACA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,SAAA,EAAA,SACA,CACA,CACA;AACA;AACA;AACA;AACA;AACA,GAAA,YAAA,EAAA,YAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CACA,mBAAA,YAAA,2GAAA,iJAAA,CAAA,MAAA,OACgB,MAAA,CAAA,+CAAA,CAAA,GAAA,CAAA,CAAA,CAAS,MAAA,CAAA,OAAT,CAAwB,mDAAA,CAAA,GAAA,CAAxB,EACA,MAAA,CAAA,+CAAA,CAAA,GAAA,CAAA,CAAA,CAAS,MAAA,CAAA,OAAT,CAAwB,mDAAA,CAAA,GAAA,CAAxB,EACA,MAAA,CAAA,+CAAA,CAAA,GAAA,CAAA,CAAA,CAAS,MAAA,CAAA,OAAT,CAAwB,mDAAA,CAAA,GAAA,CAAxB,CAChB,CACA;AACA,mBAAA,YAAA,2GAAA,iJAAA,CAAA,MAAA,OACA,KAAA,WAAA,CAAA,MAAA,CACA,CACA,CACA,CAtjBA,SAujBA,UAvjBA,gGAujBA,kBAAA,YAAA,CAAA,WAAA,CAAA,EAAA,yNACA;AACA;AACA,IAHA,CAGA,EAAA,CAAA,IAHA,CAIA,gBAJA,CAIA,IAAA,CAAA,iBAAA,CACA,SAAA,GAAA,QAAA,CAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CADA,CAEA,SANA,CAOA,IAPA,CAOqB,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAU,IAAV,CAPrB,CAQA,UARA,CAQA,YAAA,CAAA,OARA,CASA,SATA,CASA,WAAA,EAAA,WAAA,CAAA,OATA,CAUA,aAVA,CAUA,MAAA,CAAA,MAAA,CAAA,CAA6C,IAAA,CAAA,IAA7C,CAA6C,UAAA,CAAA,KAAA,aAAA,CAAA,YAAA,CAA7C,CAA6C,MAAA,CAAA,KAAA,EAA7C,CAA6C,gBAAA,CAAA,KAAA,SAAA,EAAA,IAAA,CAAA,gBAAA,EAAmI,gDAAA,CAAA,GAAA,CAAA,CAAM,GAAN,CAAM,cAAN,CAAhL,CAAsL,gBAAA,CAAA,gBAAtL,CAAsL,QAAA,CAAA,KAAA,QAAA,EAAmE,gDAAA,CAAA,GAAA,CAAA,CAAM,UAAN,CAAM,UAAN,CAAM,IAAN,CAAzP,CAA+P,UAAA,CAAA,UAA/P,CACA,SAAA,CAAA,SADA,CAAA,CACuB,IADvB,CAVA,wBAYuC,CAAA,MAAA,CAAA,+CAAA,CAAA,GAAA,CAAA,CAAA,CAAU,aAAV,CAZvC,6BAYe,YAZf,OAYe,YAZf,kCAaA,KAAA,gBAAA,CAAA,YAAA,CAAA,YAAA,CAAA,WAAA,CAAA,IAAA,CAbA,+DAvjBA,0GAskBA,gBAtkBA,CAskBA,0BAAA,YAAA,CAAA,YAAA,CAAA,WAAA,CAAA,IAAA,CAAA,CACA,GAAA,CAAA,WAAA,CAAA,YAAA,CAAA,YAAA,CAAA,WAAA,CACA,GAAA,WAAA,CAAA,CACA,KAAA,OAAA,CAAA,WAAA,CACA,CACA,MAAA,CACA,YAAA,CAAA,YADA,CAEA,kBAAA,CAAA,IAFA,CAGA,YAAA,CAAA,YAHA,CAIA,WAAA,CAAA,WAJA,CAKA,SAAA,CAAA,IAAA,CAAA,SALA,CAOA,CAllBA,SAmlBA,YAnlBA,CAmlBA,sBAAA,IAAA,CAAA,KAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,KAAA,KAAA,CACA,GAAA,CAAA,aAAA,CAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CACA,GAAA,aAAA,CAAA,CAAA,CAAA,CAAA,CACA;AACA;AACY,MAAA,CAAA,iDAAA,CAAA,GAAA,CAAA,CAAA,CAAM,IAAA,CAAA,GAAA,GAAA,IAAN,CAAM,6BAAN,EACZ,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,CAAA,aAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CACA,CALA,IAMA,CACY,MAAA,CAAA,iDAAA,CAAA,GAAA,CAAA,CAAA,CAAM,CAAA,IAAA,CAAA,GAAN,CAAM,aAAN,EACZ;AACA;AACA,IAAA,CAAA,GAAA,CAAA,IAAA,CACA;AACA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA,IAAA,CACA,CACA,CApmBA,SAqmBA,UArmBA,CAqmBA,oBAAA,IAAA,CAAA,CACQ,MAAA,CAAA,iDAAA,CAAA,GAAA,CAAA,CAAA,CAAM,IAAA,CAAA,KAAA,GAAA,mBAAA,EAAA,IAAA,CAAA,KAAA,GAAA,oBAAN,CAAM,0CAAN,EACR,GAAA,CAAA,KAAA,CAAA,KAAA,KAAA,CACA,GAAA,CAAA,KAAA,CAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CACQ,MAAA,CAAA,iDAAA,CAAA,GAAA,CAAA,CAAA,CAAM,KAAA,CAAA,CAAA,CAAN,CAAM,gCAAN,EACR,GAAA,KAAA,EAAA,CAAA,CAAA,CACA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CACA,CACA,CA7mBA,SA8mBA,WA9mBA,CA8mBA,qBAAA,IAAA,CAAA,CACA,IAAA,CAAA,QAAA,GACA,KAAA,UAAA,CAAA,IAAA,CACA,CACA;;OAlnBA,SAqnBA,OArnBA,CAqnBA,iBAAA,UAAA,CAAA,CACA;AACA;AACA;AACA,GAAA,KAAA,SAAA,CAAA,CACA,MACA,CACA,GAAA,CAAA,KAAA,CAAA,KAAA,KAAA,CACA,GAAA,CAAA,eAAA,CAAA,KAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CACA,IAAA,GAAA,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAsC,CAAA,EAAA,CAAtC,CAA8C,CAAA,EAA9C,CAA8C,CAC9C,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CACA,GAAA,CAAA,OAAA,CAAA,IAAA,CAAA,OAAA,CACA,GAAA,CAAA,CAAA,eAAA,CAAA,CACA;AACA;AACgB,MAAA,CAAA,+CAAA,CAAA,GAAA,CAAA,CAAA,CAAS,OAAT,CAAmB,mDAAA,CAAA,GAAA,CAAnB,EAChB,KAAA,WAAA,CAAA,IAAA,CACA,CALA,IAMA,IAAA,CAAA,CAAA,eAAA,CAAA,CACA;AACA;AACgB,MAAA,CAAA,+CAAA,CAAA,GAAA,CAAA,CAAA,CAAa,OAAb,CAAa,IAAb,CAChB,CACA,CACA,CA7oBA,SA8oBA,QA9oBA,CA8oBA,mBAAA,CACA,MAAA,CAAA,CAAA,KAAA,YAAA,EACA,CAAA,KAAA,eADA,EAEA,KAAA,UAAA,CAAA,MAAA,GAAA,CAFA,EAGA,KAAA,gBAHA,EAIA,KAAA,aAAA,EACA,CAppBA,SAqpBA,OArpBA,CAqpBA,kBAAA,CACA,KAAA,SAAA,CAAA,CACA,WAAA,CAAA,CAAA,CADA,CAEA,WAAA,CAAA,CAFA,CAGA,IAAA,CAAA,CACA,SAAA,CAAA,MADA,CAEA,iBAAA,CAAA,IAFA,CAHA,CAAA,CAOS,SAPT,CAQA,CA9pBA,SA+pBA,MA/pBA,CA+pBA,gBAAA,SAAA,CAAA,CACA,GAAA,KAAA,KAAA,CAAA,CACA,KAAA,KAAA,CAAA,YAAA,CAAA,SAAA,CACA,CACA,CAnqBA,SAoqBA,KApqBA,CAoqBA,eAAA,cAAA,CAAA,SAAA,CAAA,GAAA,CAAA,iBACA,GAAA,KAAA,KAAA,CAAA,CACA,KAAA,gBAAA,CAAA,KAAA,CACA,KAAA,KAAA,CAAA,QAAA,CAAA,UAAA,CACA,MAAA,CAAA,gBAAA,CAAA,IACa,CAFb,CAEa,CAAG,eAAA,CAAA,IAAH,CAFb,EAGA;AACA,GAAA,CAAA,YAAA,CAAA,cAAA,CAAA,CAAA,KAAA,CAAA,KAAA,CACA;;;;;;;eAQA,GAAA,CAAA,cAAA,CAAA,CACA,KAAA,KAAA,CAAA,MAAA,CAAA,gCAAA,EACA,YAAA,EAAgC,MAAA,CAAA,sDAAA,CAAA,GAAA,CAAA,CAAA,CAAuB,GAAK,CAAA,sDAAA,CAAA,GAAA,CAAL,CAAU,CAAV,CAAU,CAAV,CAAvB,CAAiC,GAAY,CAAA,sDAAA,CAAA,GAAA,CAAZ,CAAiB,CAAjB,CAAiB,CAAjB,CAAjC,CAAkD,GAAY,CAAA,sDAAA,CAAA,GAAA,CAAZ,CAAiB,IAAjB,CAAiB,IAAjB,CAAlD,CAAmE,GAAkB,CAAA,sDAAA,CAAA,GAAA,CAAlB,CAAuB,CAAvB,CAAuB,CAAvB,CAAnE,CAA0F,SAA1F,CAChC,CAHA,IAIA,CACA,YAAA,EAAgC,MAAA,CAAA,sDAAA,CAAA,GAAA,CAAA,CAAA,CAAuB,GAAK,CAAA,sDAAA,CAAA,GAAA,CAAL,CAAU,CAAV,CAAU,CAAV,CAAvB,CAAiC,GAAY,CAAA,sDAAA,CAAA,GAAA,CAAZ,CAAiB,IAAjB,CAAiB,IAAjB,CAAjC,CAAkD,GAAkB,CAAA,sDAAA,CAAA,GAAA,CAAlB,CAAuB,CAAvB,CAAuB,CAAvB,CAAlD,CAAyE,GAAY,CAAA,sDAAA,CAAA,GAAA,CAAZ,CAAiB,CAAjB,CAAiB,CAAjB,CAAzE,CAA0F,SAA1F,CAChC,CACA,KAAA,KAAA,CAAA,WAAA,CAAA,cAAA,CAAA,YAAA,CAAA,GAAA,CACA,CACA,CA7rBA,SA8rBA,MA9rBA,CA8rBA,iBAAA,CACA,MAAgB,CAAA,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAC,MAAD,CAAC,IAAD,CAChB,CAhsBA,+CAisBA,CAAc,MAAQ,CAAA,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAU,IAAV,CAAiB,CAjsBvC,sCAksBA,CAA2B,MAAA,CAC3B,eAAA,CAAA,qBAAA,CAD2B,CAE3B,OAAA,CAAA,aAAA,CAF2B,CAGrB,CArsBN,iCAssBA,CAAwB,MAAA,4GAAqH,CAtsB7I,iBAAA,CAysBA,GAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,EAAA,CAAA,eAAA,CAAA,SAAA,CAAA,cAAA,CAAA,CACA,GAAA,CAAA,GAAA,CAAA,EAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CACA,GAAA,GAAA,CAAA,CACA,GAAA,eAAA,GAAA,SAAA,CAAA,CACA,GAAA,SAAA,GAAA,SAAA,CAAA,CACA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,SAAA,CAAA,cAAA,CAAA,CAA4D,UAAA,CAAA,IAA5D,CAAA,CACA,CACA,CAJA,IAKA,IAAA,eAAA,GAAA,MAAA,CAAA,CACA,GAAA,SAAA,GAAA,SAAA,CAAA,CACA,MAAA,CAAA,GAAA,CAAA,OAAA,CAAA,SAAA,CAAA,cAAA,CAAA,CAA+D,UAAA,CAAA,IAA/D,CAAA,CACA,CACA,CAJA,IAKA,IAAA,eAAA,GAAA,MAAA,CAAA,CACA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAA4B,UAAA,CAAA,IAA5B,CAAA,CACA,CACA,CACA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,KAAA,CACA,CAlBA,CAoBA,GAAA,CAAA,OAAA,yBACA,iBAAA,OAAA,CAAA,iBACQ,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAgB,IAAhB,CAAgB,OAAhB,EACR;;WAGA,KAAA,eAAA,CAAA,SAAA,CACA,KAAA,OAAA,CAAA,UAAA,CACA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,EAAA,CAAA,MAAA,CAAA,eAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,cAAA,CACA,CACA,CAVA,sCAWA,MAXA,CAWA,iBAAA,CACA,MAAgB,CAAA,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAE,8CAAA,CAAA,GAAA,CAAF,CAAM,CAAG,OAAA,CAAA,KAAA,OAAH,CAAN,CAChB,CAbA,mDAcA,CAAc,MAAQ,CAAA,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAU,IAAV,CAAiB,CAdvC,qBAAA,CAiBA,GAAA,CAAA,MAAA,yBACA,gBAAA,OAAA,CAAA,iBACQ,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAgB,IAAhB,CAAgB,OAAhB,EACR,KAAA,GAAA,CAAA,UAAA,CACA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,EAAA,CAAA,MAAA,CACA,CACA,CANA,qCAOA,gBAPA,CAOA,2BAAA,CACA,OAAA,CAAA,IAAA,CAAA,+GAAA,CACA,CATA,SAUA,MAVA,CAUA,iBAAA,CACA,MAAgB,CAAA,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAE,8CAAA,CAAA,GAAA,CAAF,CAAM,CAAG,OAAA,CAAA,KAAA,GAAH,CAAN,CAChB,CAZA,kDAaA,CAAc,MAAQ,CAAA,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAU,IAAV,CAAiB,CAbvC,oBAAA,CAgBA,GAAA,CAAA,OAAA,yBACA,iBAAA,OAAA,CAAA,iBACQ,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAgB,IAAhB,CAAgB,OAAhB,EACR,KAAA,IAAA,CAAA,UAAA,CACA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,cAAA,CACA,CACA,CANA,sCAOA,gBAPA,CAOA,2BAAA,CACA,OAAA,CAAA,IAAA,CAAA,8IAAA,CACA,CATA,SAUA,MAVA,CAUA,iBAAA,CACA,MAAgB,CAAA,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAE,8CAAA,CAAA,GAAA,CAAF,CAAM,CAAG,OAAA,CAAA,KAAA,IAAH,CAAN,CAChB,CAZA,mDAaA,CAAc,MAAQ,CAAA,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAU,IAAV,CAAiB,CAbvC,qBAAA,CAgBA,GAAA,CAAA,UAAA,yBACA,oBAAA,OAAA,CAAA,iBACQ,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAgB,IAAhB,CAAgB,OAAhB,EACR,KAAA,OAAA,CAAA,UAAA,CACA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,EAAA,CAAA,MAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,cAAA,CACA,CACA,CANA,yCAOA,gBAPA,CAOA,2BAAA,CACA,OAAA,CAAA,IAAA,CAAA,+KAAA,CACA,CATA,SAUA,MAVA,CAUA,iBAAA,CACA,MAAgB,CAAA,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAE,8CAAA,CAAA,GAAA,CAAF,CAAM,CAAG,OAAA,CAAA,KAAA,OAAH,CAAN,CAChB,CAZA,sDAaA,CAAc,MAAQ,CAAA,MAAA,CAAA,8CAAA,CAAA,GAAA,CAAA,CAAA,CAAU,IAAV,CAAiB,CAbvC,wBAAA,C","sourcesContent":["import { r as registerInstance, c as createEvent, d as getIonMode, h, e as getElement, H as Host } from './core-c02a05e9.js';\nimport { b as config } from './config-503c2549.js';\nimport { d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './constants-94c4865f.js';\nimport { b as assert } from './helpers-c90aaa66.js';\nimport { a as attachComponent } from './framework-delegate-00265c49.js';\nimport { l as lifecycle, t as transition, s as setPageHidden } from './index-a15151df.js';\nimport { g as getTimeGivenProgression, P as Point } from './cubic-bezier-90d0df24.js';\n\nconst VIEW_STATE_NEW = 1;\r\nconst VIEW_STATE_ATTACHED = 2;\r\nconst VIEW_STATE_DESTROYED = 3;\r\nclass ViewController {\r\n    constructor(component, params) {\r\n        this.component = component;\r\n        this.params = params;\r\n        this.state = VIEW_STATE_NEW;\r\n    }\r\n    async init(container) {\r\n        this.state = VIEW_STATE_ATTACHED;\r\n        if (!this.element) {\r\n            const component = this.component;\r\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     */\r\n    _destroy() {\r\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\r\n        const element = this.element;\r\n        if (element) {\r\n            if (this.delegate) {\r\n                this.delegate.removeViewFromDom(element.parentElement, element);\r\n            }\r\n            else {\r\n                element.remove();\r\n            }\r\n        }\r\n        this.nav = undefined;\r\n        this.state = VIEW_STATE_DESTROYED;\r\n    }\r\n}\r\nconst matches = (view, id, params) => {\r\n    if (!view) {\r\n        return false;\r\n    }\r\n    if (view.component !== id) {\r\n        return false;\r\n    }\r\n    const currentParams = view.params;\r\n    if (currentParams === params) {\r\n        return true;\r\n    }\r\n    if (!currentParams && !params) {\r\n        return true;\r\n    }\r\n    if (!currentParams || !params) {\r\n        return false;\r\n    }\r\n    const keysA = Object.keys(currentParams);\r\n    const keysB = Object.keys(params);\r\n    if (keysA.length !== keysB.length) {\r\n        return false;\r\n    }\r\n    // Test for A's keys different from B.\r\n    for (const key of keysA) {\r\n        if (currentParams[key] !== params[key]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\nconst convertToView = (page, params) => {\r\n    if (!page) {\r\n        return null;\r\n    }\r\n    if (page instanceof ViewController) {\r\n        return page;\r\n    }\r\n    return new ViewController(page, params);\r\n};\r\nconst convertToViews = (pages) => {\r\n    return pages.map(page => {\r\n        if (page instanceof ViewController) {\r\n            return page;\r\n        }\r\n        if ('page' in page) {\r\n            return convertToView(page.page, page.params);\r\n        }\r\n        return convertToView(page, undefined);\r\n    }).filter(v => v !== null);\r\n};\n\nconst Nav = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.transInstr = [];\n        this.animationEnabled = true;\n        this.useRouter = false;\n        this.isTransitioning = false;\n        this.destroyed = false;\n        this.views = [];\n        /**\n         * If `true`, the nav should animate the transition of components.\n         */\n        this.animated = true;\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    }\n    swipeGestureChanged() {\n        if (this.gesture) {\n            this.gesture.setDisabled(this.swipeGesture !== true);\n        }\n    }\n    rootChanged() {\n        if (this.root !== undefined) {\n            if (!this.useRouter) {\n                this.setRoot(this.root, this.rootParams);\n            }\n        }\n    }\n    componentWillLoad() {\n        this.useRouter =\n            !!document.querySelector('ion-router') &&\n                !this.el.closest('[no-router]');\n        if (this.swipeGesture === undefined) {\n            const mode = getIonMode(this);\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n        }\n        this.ionNavWillLoad.emit();\n    }\n    async componentDidLoad() {\n        this.rootChanged();\n        this.gesture = (await import('./swipe-back-dc1b83c2.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n        this.swipeGestureChanged();\n    }\n    componentDidUnload() {\n        for (const view of this.views) {\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            view._destroy();\n        }\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        // release swipe back gesture and transition\n        this.transInstr.length = this.views.length = 0;\n        this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    push(component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: -1,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insert(insertIndex, component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insertPages(insertIndex, insertComponents, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: insertComponents,\n            opts\n        }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    pop(opts, done) {\n        return this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts\n        }, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popTo(indexOrViewCtrl, opts, done) {\n        const tiConfig = {\n            removeStart: -1,\n            removeCount: -1,\n            opts\n        };\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n            tiConfig.removeView = indexOrViewCtrl;\n            tiConfig.removeStart = 1;\n        }\n        else if (typeof indexOrViewCtrl === 'number') {\n            tiConfig.removeStart = indexOrViewCtrl + 1;\n        }\n        return this.queueTrns(tiConfig, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popToRoot(opts, done) {\n        return this.queueTrns({\n            removeStart: 1,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    removeIndex(startIndex, removeCount = 1, opts, done) {\n        return this.queueTrns({\n            removeStart: startIndex,\n            removeCount,\n            opts\n        }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setRoot(component, componentProps, opts, done) {\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setPages(views, opts, done) {\n        if (opts == null) {\n            opts = {};\n        }\n        // if animation wasn't set to true then default it to NOT animate\n        if (opts.animated !== true) {\n            opts.animated = false;\n        }\n        return this.queueTrns({\n            insertStart: 0,\n            insertViews: views,\n            removeStart: 0,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /** @internal */\n    setRouteId(id, params, direction) {\n        const active = this.getActiveSync();\n        if (matches(active, id, params)) {\n            return Promise.resolve({\n                changed: false,\n                element: active.element\n            });\n        }\n        let resolve;\n        const promise = new Promise(r => (resolve = r));\n        let finish;\n        const commonOpts = {\n            updateURL: false,\n            viewIsReady: enteringEl => {\n                let mark;\n                const p = new Promise(r => (mark = r));\n                resolve({\n                    changed: true,\n                    element: enteringEl,\n                    markVisible: async () => {\n                        mark();\n                        await finish;\n                    }\n                });\n                return p;\n            }\n        };\n        if (direction === 'root') {\n            finish = this.setRoot(id, params, commonOpts);\n        }\n        else {\n            const viewController = this.views.find(v => matches(v, id, params));\n            if (viewController) {\n                finish = this.popTo(viewController, Object.assign({}, commonOpts, { direction: 'back' }));\n            }\n            else if (direction === 'forward') {\n                finish = this.push(id, params, commonOpts);\n            }\n            else if (direction === 'back') {\n                finish = this.setRoot(id, params, Object.assign({}, commonOpts, { direction: 'back', animated: true }));\n            }\n        }\n        return promise;\n    }\n    /** @internal */\n    async getRouteId() {\n        const active = this.getActiveSync();\n        return active\n            ? {\n                id: active.element.tagName,\n                params: active.params,\n                element: active.element\n            }\n            : undefined;\n    }\n    /**\n     * Get the active view.\n     */\n    getActive() {\n        return Promise.resolve(this.getActiveSync());\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n    getByIndex(index) {\n        return Promise.resolve(this.views[index]);\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n    canGoBack(view) {\n        return Promise.resolve(this.canGoBackSync(view));\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n    getPrevious(view) {\n        return Promise.resolve(this.getPreviousSync(view));\n    }\n    getLength() {\n        return this.views.length;\n    }\n    getActiveSync() {\n        return this.views[this.views.length - 1];\n    }\n    canGoBackSync(view = this.getActiveSync()) {\n        return !!(view && this.getPreviousSync(view));\n    }\n    getPreviousSync(view = this.getActiveSync()) {\n        if (!view) {\n            return undefined;\n        }\n        const views = this.views;\n        const index = views.indexOf(view);\n        return index > 0 ? views[index - 1] : undefined;\n    }\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n    queueTrns(ti, done) {\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n            return Promise.resolve(false);\n        }\n        const promise = new Promise((resolve, reject) => {\n            ti.resolve = resolve;\n            ti.reject = reject;\n        });\n        ti.done = done;\n        // Normalize empty\n        if (ti.insertViews && ti.insertViews.length === 0) {\n            ti.insertViews = undefined;\n        }\n        // Enqueue transition instruction\n        this.transInstr.push(ti);\n        // if there isn't a transition already happening\n        // then this will kick off this transition\n        this.nextTrns();\n        return promise;\n    }\n    success(result, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        if (ti.done) {\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n        }\n        ti.resolve(result.hasCompleted);\n        if (ti.opts.updateURL !== false && this.useRouter) {\n            const router = document.querySelector('ion-router');\n            if (router) {\n                const direction = result.direction === 'back' ? 'back' : 'forward';\n                router.navChanged(direction);\n            }\n        }\n    }\n    failed(rejectReason, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        this.transInstr.length = 0;\n        this.fireError(rejectReason, ti);\n    }\n    fireError(rejectReason, ti) {\n        if (ti.done) {\n            ti.done(false, false, rejectReason);\n        }\n        if (ti.reject && !this.destroyed) {\n            ti.reject(rejectReason);\n        }\n        else {\n            ti.resolve(false);\n        }\n    }\n    nextTrns() {\n        // this is the framework's bread 'n butta function\n        // only one transition is allowed at any given time\n        if (this.isTransitioning) {\n            return false;\n        }\n        // there is no transition happening right now\n        // get the next instruction\n        const ti = this.transInstr.shift();\n        if (!ti) {\n            return false;\n        }\n        this.runTransition(ti);\n        return true;\n    }\n    async runTransition(ti) {\n        try {\n            // set that this nav is actively transitioning\n            this.ionNavWillChange.emit();\n            this.isTransitioning = true;\n            this.prepareTI(ti);\n            const leavingView = this.getActiveSync();\n            const enteringView = this.getEnteringView(ti, leavingView);\n            if (!leavingView && !enteringView) {\n                throw new Error('no views in the stack to be removed');\n            }\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n                await enteringView.init(this.el);\n            }\n            this.postViewInit(enteringView, leavingView, ti);\n            // Needs transition?\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n                enteringView !== leavingView;\n            const result = requiresTransition\n                ? await this.transition(enteringView, leavingView, ti)\n                : {\n                    // transition is not required, so we are already done!\n                    // they're inserting/removing the views somewhere in the middle or\n                    // beginning, so visually nothing needs to animate/transition\n                    // resolve immediately because there's no animation that's happening\n                    hasCompleted: true,\n                    requiresTransition: false\n                };\n            this.success(result, ti);\n            this.ionNavDidChange.emit();\n        }\n        catch (rejectReason) {\n            this.failed(rejectReason, ti);\n        }\n        this.isTransitioning = false;\n        this.nextTrns();\n    }\n    prepareTI(ti) {\n        const viewsLength = this.views.length;\n        ti.opts = ti.opts || {};\n        if (ti.opts.delegate === undefined) {\n            ti.opts.delegate = this.delegate;\n        }\n        if (ti.removeView !== undefined) {\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n            const index = this.views.indexOf(ti.removeView);\n            if (index < 0) {\n                throw new Error('removeView was not found');\n            }\n            ti.removeStart += index;\n        }\n        if (ti.removeStart !== undefined) {\n            if (ti.removeStart < 0) {\n                ti.removeStart = viewsLength - 1;\n            }\n            if (ti.removeCount < 0) {\n                ti.removeCount = viewsLength - ti.removeStart;\n            }\n            ti.leavingRequiresTransition =\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n        }\n        if (ti.insertViews) {\n            // allow -1 to be passed in to auto push it on the end\n            // and clean up the index if it's larger then the size of the stack\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n                ti.insertStart = viewsLength;\n            }\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n        }\n        const insertViews = ti.insertViews;\n        if (!insertViews) {\n            return;\n        }\n        assert(insertViews.length > 0, 'length can not be zero');\n        const viewControllers = convertToViews(insertViews);\n        if (viewControllers.length === 0) {\n            throw new Error('invalid views to insert');\n        }\n        // Check all the inserted view are correct\n        for (const view of viewControllers) {\n            view.delegate = ti.opts.delegate;\n            const nav = view.nav;\n            if (nav && nav !== this) {\n                throw new Error('inserted view was already inserted');\n            }\n            if (view.state === VIEW_STATE_DESTROYED) {\n                throw new Error('inserted view was already destroyed');\n            }\n        }\n        ti.insertViews = viewControllers;\n    }\n    getEnteringView(ti, leavingView) {\n        const insertViews = ti.insertViews;\n        if (insertViews !== undefined) {\n            // grab the very last view of the views to be inserted\n            // and initialize it as the new entering view\n            return insertViews[insertViews.length - 1];\n        }\n        const removeStart = ti.removeStart;\n        if (removeStart !== undefined) {\n            const views = this.views;\n            const removeEnd = removeStart + ti.removeCount;\n            for (let i = views.length - 1; i >= 0; i--) {\n                const view = views[i];\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n                    return view;\n                }\n            }\n        }\n        return undefined;\n    }\n    postViewInit(enteringView, leavingView, ti) {\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n        assert(ti.resolve, 'resolve must be valid');\n        assert(ti.reject, 'reject must be valid');\n        const opts = ti.opts;\n        const insertViews = ti.insertViews;\n        const removeStart = ti.removeStart;\n        const removeCount = ti.removeCount;\n        let destroyQueue;\n        // there are views to remove\n        if (removeStart !== undefined && removeCount !== undefined) {\n            assert(removeStart >= 0, 'removeStart can not be negative');\n            assert(removeCount >= 0, 'removeCount can not be negative');\n            destroyQueue = [];\n            for (let i = 0; i < removeCount; i++) {\n                const view = this.views[i + removeStart];\n                if (view && view !== enteringView && view !== leavingView) {\n                    destroyQueue.push(view);\n                }\n            }\n            // default the direction to \"back\"\n            opts.direction = opts.direction || 'back';\n        }\n        const finalBalance = this.views.length +\n            (insertViews !== undefined ? insertViews.length : 0) -\n            (removeCount !== undefined ? removeCount : 0);\n        assert(finalBalance >= 0, 'final balance can not be negative');\n        if (finalBalance === 0) {\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n            throw new Error('navigation stack needs at least one root page');\n        }\n        // At this point the transition can not be rejected, any throw should be an error\n        // there are views to insert\n        if (insertViews) {\n            // add the views to the\n            let insertIndex = ti.insertStart;\n            for (const view of insertViews) {\n                this.insertViewAt(view, insertIndex);\n                insertIndex++;\n            }\n            if (ti.enteringRequiresTransition) {\n                // default to forward if not already set\n                opts.direction = opts.direction || 'forward';\n            }\n        }\n        // if the views to be removed are in the beginning or middle\n        // and there is not a view that needs to visually transition out\n        // then just destroy them and don't transition anything\n        // batch all of lifecycles together\n        // let's make sure, callbacks are zoned\n        if (destroyQueue && destroyQueue.length > 0) {\n            for (const view of destroyQueue) {\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            }\n            // once all lifecycle events has been delivered, we can safely detroy the views\n            for (const view of destroyQueue) {\n                this.destroyView(view);\n            }\n        }\n    }\n    async transition(enteringView, leavingView, ti) {\n        // we should animate (duration > 0) if the pushed page is not the first one (startup)\n        // or if it is a portal (modal, actionsheet, etc.)\n        const opts = ti.opts;\n        const progressCallback = opts.progressAnimation\n            ? (ani) => this.sbAni = ani\n            : undefined;\n        const mode = getIonMode(this);\n        const enteringEl = enteringView.element;\n        const leavingEl = leavingView && leavingView.element;\n        const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n            leavingEl }, opts);\n        const { hasCompleted } = await transition(animationOpts);\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    }\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n        const cleanupView = hasCompleted ? enteringView : leavingView;\n        if (cleanupView) {\n            this.cleanup(cleanupView);\n        }\n        return {\n            hasCompleted,\n            requiresTransition: true,\n            enteringView,\n            leavingView,\n            direction: opts.direction\n        };\n    }\n    insertViewAt(view, index) {\n        const views = this.views;\n        const existingIndex = views.indexOf(view);\n        if (existingIndex > -1) {\n            // this view is already in the stack!!\n            // move it to its new location\n            assert(view.nav === this, 'view is not part of the nav');\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n        }\n        else {\n            assert(!view.nav, 'nav is used');\n            // this is a new view to add to the stack\n            // create the new entering view\n            view.nav = this;\n            // insert the entering view into the correct index in the stack\n            views.splice(index, 0, view);\n        }\n    }\n    removeView(view) {\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n        const views = this.views;\n        const index = views.indexOf(view);\n        assert(index > -1, 'view must be part of the stack');\n        if (index >= 0) {\n            views.splice(index, 1);\n        }\n    }\n    destroyView(view) {\n        view._destroy();\n        this.removeView(view);\n    }\n    /**\n     * DOM WRITE\n     */\n    cleanup(activeView) {\n        // ok, cleanup time!! Destroy all of the views that are\n        // INACTIVE and come after the active view\n        // only do this if the views exist, though\n        if (this.destroyed) {\n            return;\n        }\n        const views = this.views;\n        const activeViewIndex = views.indexOf(activeView);\n        for (let i = views.length - 1; i >= 0; i--) {\n            const view = views[i];\n            const element = view.element;\n            if (i > activeViewIndex) {\n                // this view comes after the active view\n                // let's unload it\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n                this.destroyView(view);\n            }\n            else if (i < activeViewIndex) {\n                // this view comes before the active view\n                // and it is not a portal then ensure it is hidden\n                setPageHidden(element, true);\n            }\n        }\n    }\n    canStart() {\n        return (!!this.swipeGesture &&\n            !this.isTransitioning &&\n            this.transInstr.length === 0 &&\n            this.animationEnabled &&\n            this.canGoBackSync());\n    }\n    onStart() {\n        this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts: {\n                direction: 'back',\n                progressAnimation: true\n            }\n        }, undefined);\n    }\n    onMove(stepValue) {\n        if (this.sbAni) {\n            this.sbAni.progressStep(stepValue);\n        }\n    }\n    onEnd(shouldComplete, stepValue, dur) {\n        if (this.sbAni) {\n            this.animationEnabled = false;\n            this.sbAni.onFinish(() => {\n                this.animationEnabled = true;\n            }, { oneTimeCallback: true });\n            // Account for rounding errors in JS\n            let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n            /**\n             * Animation will be reversed here, so need to\n             * reverse the easing curve as well\n             *\n             * Additionally, we need to account for the time relative\n             * to the new easing curve, as `stepValue` is going to be given\n             * in terms of a linear curve.\n             */\n            if (!shouldComplete) {\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n                newStepValue += getTimeGivenProgression(new Point(0, 0), new Point(1, 0), new Point(0.68, 0.28), new Point(1, 1), stepValue);\n            }\n            else {\n                newStepValue += getTimeGivenProgression(new Point(0, 0), new Point(0.32, 0.72), new Point(0, 1), new Point(1, 1), stepValue);\n            }\n            this.sbAni.progressEnd(shouldComplete, newStepValue, dur);\n        }\n    }\n    render() {\n        return (h(\"slot\", null));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n    }; }\n    static get style() { return \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\"; }\n};\n\nconst navLink = (el, routerDirection, component, componentProps) => {\r\n    const nav = el.closest('ion-nav');\r\n    if (nav) {\r\n        if (routerDirection === 'forward') {\r\n            if (component !== undefined) {\r\n                return nav.push(component, componentProps, { skipIfBusy: true });\r\n            }\r\n        }\r\n        else if (routerDirection === 'root') {\r\n            if (component !== undefined) {\r\n                return nav.setRoot(component, componentProps, { skipIfBusy: true });\r\n            }\r\n        }\r\n        else if (routerDirection === 'back') {\r\n            return nav.pop({ skipIfBusy: true });\r\n        }\r\n    }\r\n    return Promise.resolve(false);\r\n};\n\nconst NavLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * The transition direction when navigating to another page.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = () => {\n            return navLink(this.el, this.routerDirection, this.component, this.componentProps);\n        };\n    }\n    render() {\n        return (h(Host, { onClick: this.onClick }));\n    }\n    get el() { return getElement(this); }\n};\n\nconst NavPop = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.pop = () => {\n            return navLink(this.el, 'back');\n        };\n    }\n    componentDidLoad() {\n        console.warn('[DEPRECATED][ion-nav-pop] <ion-nav-pop> is deprecated. Use `<ion-nav-link routerDirection=\"back\">` instead.');\n    }\n    render() {\n        return (h(Host, { onClick: this.pop }));\n    }\n    get el() { return getElement(this); }\n};\n\nconst NavPush = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.push = () => {\n            return navLink(this.el, 'forward', this.component, this.componentProps);\n        };\n    }\n    componentDidLoad() {\n        console.warn('[DEPRECATED][ion-nav-push] `<ion-nav-push component=\"MyComponent\">` is deprecated. Use `<ion-nav-link component=\"MyComponent\">` instead.');\n    }\n    render() {\n        return (h(Host, { onClick: this.push }));\n    }\n    get el() { return getElement(this); }\n};\n\nconst NavSetRoot = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.setRoot = () => {\n            return navLink(this.el, 'root', this.component, this.componentProps);\n        };\n    }\n    componentDidLoad() {\n        console.warn('[DEPRECATED][ion-nav-set-root] `<ion-nav-set-root component=\"MyComponent\">` is deprecated. Use `<ion-nav-link component=\"MyComponent\" routerDirection=\"root\">` instead.');\n    }\n    render() {\n        return (h(Host, { onClick: this.setRoot }));\n    }\n    get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link, NavPop as ion_nav_pop, NavPush as ion_nav_push, NavSetRoot as ion_nav_set_root };\n"],"sourceRoot":"webpack:///"}