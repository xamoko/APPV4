"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const load_hook_1 = require("../ext/load-hook");
const core_1 = require("@angular-devkit/core");
const path = require("path");
const webpackMerge = require("webpack-merge");
function runBuilderHandler(options, transforms, context, builderHandler, configTransformerName = 'webpackConfiguration') {
    let plugin = null;
    if (options.plugin) {
        plugin = load_hook_1.loadHook(options.plugin);
    }
    setupConfigHook(transforms, options, context, plugin, configTransformerName);
    if (plugin && plugin.pre) {
        plugin.pre(options);
    }
    const result = asObservable(builderHandler(options, context, transforms));
    return result.pipe(operators_1.tap(_ => {
        if (plugin && plugin.post) {
            plugin.post(options);
        }
    }));
}
exports.runBuilderHandler = runBuilderHandler;
function asObservable(result) {
    if (rxjs_1.isObservable(result)) {
        return result;
    }
    if (result instanceof Promise) {
        return rxjs_1.from(result);
    }
    return rxjs_1.of(result);
}
function setupConfigHook(transforms, options, context, plugin, configTransformerName = 'webpackConfiguration') {
    const originalConfigFn = transforms[configTransformerName];
    transforms[configTransformerName] = (config) => {
        if (options.singleBundle) {
            if (!options.keepPolyfills && config.entry && config.entry['polyfills']) {
                delete config.entry['polyfills'];
            }
            if (config.optimization) {
                delete config.optimization.runtimeChunk;
                delete config.optimization.splitChunks;
            }
        }
        if (options.singleBundle && options.bundleStyles !== false && config.entry && config.entry['styles']) {
            delete config.entry['styles'];
        }
        if (options.extraWebpackConfig) {
            const filePath = path.resolve(core_1.getSystemPath(core_1.normalize(context.workspaceRoot)), options.extraWebpackConfig);
            const additionalConfig = require(filePath);
            config = webpackMerge([config, additionalConfig]);
        }
        if (plugin && plugin.config) {
            config = plugin.config(config);
        }
        if (options.configHook) {
            const hook = load_hook_1.loadHook(options.configHook);
            config = hook(config);
        }
        if (originalConfigFn) {
            return originalConfigFn(config);
        }
        else {
            return config;
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInNyYy91dGlscy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLCtCQUE4QztBQUM5Qyw4Q0FBcUM7QUFFckMsZ0RBQTRDO0FBQzVDLCtDQUFnRTtBQUVoRSw2QkFBNkI7QUFDN0IsOENBQThDO0FBVzlDLFNBQWdCLGlCQUFpQixDQUFDLE9BQVksRUFBRSxVQUFzQixFQUFFLE9BQXVCLEVBQUUsY0FBeUMsRUFBRSxxQkFBcUIsR0FBRyxzQkFBc0I7SUFFeEwsSUFBSSxNQUFNLEdBQWtCLElBQUksQ0FBQztJQUNqQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7UUFDbEIsTUFBTSxHQUFHLG9CQUFRLENBQVMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzNDO0lBRUQsZUFBZSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBRTdFLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNyQjtJQUVELE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDekIsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtZQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNOLENBQUM7QUFwQkQsOENBb0JDO0FBRUQsU0FBUyxZQUFZLENBQUMsTUFBeUI7SUFDN0MsSUFBSSxtQkFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3RCLE9BQU8sTUFBTSxDQUFDO0tBQ2pCO0lBQ0QsSUFBSSxNQUFNLFlBQVksT0FBTyxFQUFFO1FBQzdCLE9BQU8sV0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3JCO0lBQ0QsT0FBTyxTQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLFVBQXNCLEVBQUUsT0FBWSxFQUFFLE9BQXVCLEVBQUUsTUFBcUIsRUFBRSxxQkFBcUIsR0FBRyxzQkFBc0I7SUFFM0osTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUMzRCxVQUFVLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLE1BQTZCLEVBQUUsRUFBRTtRQUVwRSxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7WUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLElBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUN2RSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDbEM7WUFDRCxJQUFJLE1BQU0sQ0FBQyxZQUFZLEVBQUU7Z0JBQ3ZCLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUM7Z0JBQ3hDLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7YUFDeEM7U0FDRjtRQUVELElBQUksT0FBTyxDQUFDLFlBQVksSUFBSSxPQUFPLENBQUMsWUFBWSxLQUFLLEtBQUssSUFBSSxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDcEcsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQy9CO1FBRUQsSUFBSSxPQUFPLENBQUMsa0JBQWtCLEVBQUU7WUFDOUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBYSxDQUFDLGdCQUFTLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDM0csTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0MsTUFBTSxHQUFHLFlBQVksQ0FBQyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7U0FDbkQ7UUFDRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQzNCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2hDO1FBRUQsSUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxHQUFHLG9CQUFRLENBQWUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3hELE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7UUFFRCxJQUFJLGdCQUFnQixFQUFFO1lBQ3BCLE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDakM7YUFDSTtZQUNILE9BQU8sTUFBTSxDQUFDO1NBQ2Y7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhlY3V0aW9uVHJhbnNmb3JtZXIgfSBmcm9tIFwiQGFuZ3VsYXItZGV2a2l0L2J1aWxkLWFuZ3VsYXJcIjtcclxuaW1wb3J0IHsgQnVpbGRlckNvbnRleHQsIEJ1aWxkZXJPdXRwdXRMaWtlIH0gZnJvbSBcIkBhbmd1bGFyLWRldmtpdC9hcmNoaXRlY3RcIjtcclxuaW1wb3J0IHsgb2YsIGZyb20sIGlzT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IFBsdWdpbiwgQ29uZmlnSG9va0ZuIH0gZnJvbSBcIi4uL2V4dC9ob29rXCI7XHJcbmltcG9ydCB7IGxvYWRIb29rIH0gZnJvbSBcIi4uL2V4dC9sb2FkLWhvb2tcIjtcclxuaW1wb3J0IHsgZ2V0U3lzdGVtUGF0aCwgbm9ybWFsaXplIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUnO1xyXG5pbXBvcnQgKiBhcyB3ZWJwYWNrIGZyb20gJ3dlYnBhY2snO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgKiBhcyB3ZWJwYWNrTWVyZ2UgZnJvbSAnd2VicGFjay1tZXJnZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zZm9ybXMge1xyXG4gIHdlYnBhY2tDb25maWd1cmF0aW9uPzogRXhlY3V0aW9uVHJhbnNmb3JtZXI8d2VicGFjay5Db25maWd1cmF0aW9uPjtcclxuIFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJ1aWxkZXJIYW5kbGVyUGx1c0ZuPEE+IHtcclxuICAoaW5wdXQ6IEEsIGNvbnRleHQ6IEJ1aWxkZXJDb250ZXh0LCB0cmFuc2Zvcm1zOiBUcmFuc2Zvcm1zKTogQnVpbGRlck91dHB1dExpa2U7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBydW5CdWlsZGVySGFuZGxlcihvcHRpb25zOiBhbnksIHRyYW5zZm9ybXM6IFRyYW5zZm9ybXMsIGNvbnRleHQ6IEJ1aWxkZXJDb250ZXh0LCBidWlsZGVySGFuZGxlcjogQnVpbGRlckhhbmRsZXJQbHVzRm48YW55PiwgY29uZmlnVHJhbnNmb3JtZXJOYW1lID0gJ3dlYnBhY2tDb25maWd1cmF0aW9uJykge1xyXG4gIFxyXG4gIGxldCBwbHVnaW46IFBsdWdpbiB8IG51bGwgPSBudWxsO1xyXG4gIGlmIChvcHRpb25zLnBsdWdpbikge1xyXG4gICAgcGx1Z2luID0gbG9hZEhvb2s8UGx1Z2luPihvcHRpb25zLnBsdWdpbik7XHJcbiAgfVxyXG5cclxuICBzZXR1cENvbmZpZ0hvb2sodHJhbnNmb3Jtcywgb3B0aW9ucywgY29udGV4dCwgcGx1Z2luLCBjb25maWdUcmFuc2Zvcm1lck5hbWUpO1xyXG5cclxuICBpZiAocGx1Z2luICYmIHBsdWdpbi5wcmUpIHtcclxuICAgIHBsdWdpbi5wcmUob3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBjb25zdCByZXN1bHQgPSBhc09ic2VydmFibGUoYnVpbGRlckhhbmRsZXIob3B0aW9ucywgY29udGV4dCwgdHJhbnNmb3JtcykpO1xyXG5cclxuICByZXR1cm4gcmVzdWx0LnBpcGUodGFwKF8gPT4ge1xyXG4gICAgaWYgKHBsdWdpbiAmJiBwbHVnaW4ucG9zdCkge1xyXG4gICAgICBwbHVnaW4ucG9zdChvcHRpb25zKTtcclxuICAgIH1cclxuICB9KSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFzT2JzZXJ2YWJsZShyZXN1bHQ6IEJ1aWxkZXJPdXRwdXRMaWtlKSB7XHJcbiAgaWYgKGlzT2JzZXJ2YWJsZShyZXN1bHQpKSB7XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG4gIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XHJcbiAgICByZXR1cm4gZnJvbShyZXN1bHQpO1xyXG4gIH1cclxuICByZXR1cm4gb2YocmVzdWx0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0dXBDb25maWdIb29rKHRyYW5zZm9ybXM6IFRyYW5zZm9ybXMsIG9wdGlvbnM6IGFueSwgY29udGV4dDogQnVpbGRlckNvbnRleHQsIHBsdWdpbjogUGx1Z2luIHwgbnVsbCwgY29uZmlnVHJhbnNmb3JtZXJOYW1lID0gJ3dlYnBhY2tDb25maWd1cmF0aW9uJykge1xyXG4gIFxyXG4gIGNvbnN0IG9yaWdpbmFsQ29uZmlnRm4gPSB0cmFuc2Zvcm1zW2NvbmZpZ1RyYW5zZm9ybWVyTmFtZV07XHJcbiAgdHJhbnNmb3Jtc1tjb25maWdUcmFuc2Zvcm1lck5hbWVdID0gKGNvbmZpZzogd2VicGFjay5Db25maWd1cmF0aW9uKSA9PiB7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuc2luZ2xlQnVuZGxlKSB7XHJcbiAgICAgIGlmICghb3B0aW9ucy5rZWVwUG9seWZpbGxzICYmIGNvbmZpZy5lbnRyeSAmJiBjb25maWcuZW50cnlbJ3BvbHlmaWxscyddKSB7XHJcbiAgICAgICAgZGVsZXRlIGNvbmZpZy5lbnRyeVsncG9seWZpbGxzJ107XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNvbmZpZy5vcHRpbWl6YXRpb24pIHtcclxuICAgICAgICBkZWxldGUgY29uZmlnLm9wdGltaXphdGlvbi5ydW50aW1lQ2h1bms7XHJcbiAgICAgICAgZGVsZXRlIGNvbmZpZy5vcHRpbWl6YXRpb24uc3BsaXRDaHVua3M7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucy5zaW5nbGVCdW5kbGUgJiYgb3B0aW9ucy5idW5kbGVTdHlsZXMgIT09IGZhbHNlICYmIGNvbmZpZy5lbnRyeSAmJiBjb25maWcuZW50cnlbJ3N0eWxlcyddKSB7XHJcbiAgICAgIGRlbGV0ZSBjb25maWcuZW50cnlbJ3N0eWxlcyddO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmV4dHJhV2VicGFja0NvbmZpZykge1xyXG4gICAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShnZXRTeXN0ZW1QYXRoKG5vcm1hbGl6ZShjb250ZXh0LndvcmtzcGFjZVJvb3QpKSwgb3B0aW9ucy5leHRyYVdlYnBhY2tDb25maWcpO1xyXG4gICAgICBjb25zdCBhZGRpdGlvbmFsQ29uZmlnID0gcmVxdWlyZShmaWxlUGF0aCk7XHJcbiAgICAgIGNvbmZpZyA9IHdlYnBhY2tNZXJnZShbY29uZmlnLCBhZGRpdGlvbmFsQ29uZmlnXSk7XHJcbiAgICB9XHJcbiAgICBpZiAocGx1Z2luICYmIHBsdWdpbi5jb25maWcpIHtcclxuICAgICAgY29uZmlnID0gcGx1Z2luLmNvbmZpZyhjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmNvbmZpZ0hvb2spIHtcclxuICAgICAgICBjb25zdCBob29rID0gbG9hZEhvb2s8Q29uZmlnSG9va0ZuPihvcHRpb25zLmNvbmZpZ0hvb2spO1xyXG4gICAgICAgIGNvbmZpZyA9IGhvb2soY29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3JpZ2luYWxDb25maWdGbikge1xyXG4gICAgICByZXR1cm4gb3JpZ2luYWxDb25maWdGbihjb25maWcpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG4iXX0=