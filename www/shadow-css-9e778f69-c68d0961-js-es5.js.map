{"version":3,"sources":["node_modules/@ionic/core/dist/esm/shadow-css-9e778f69-c68d0961.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    let content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g\n];\nconst _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotAttr) => {\n    const regExp = _cssColonSlottedRe;\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const sel = '.' + slotAttr + ' > ' + compound + suffix;\n            return sel;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\n            return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n                return before + replaceBy + colon + after;\n            });\n        })\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                const matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector.split(',')\n        .map(shallowPart => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    cssText = convertColonSlotted(cssText, slotScopeId);\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return cssText.trim();\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, rule => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scopedCssText = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scopedCssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    return cssText;\n};\n\nexport { scopeCss };\n"],"sourceRoot":"webpack:///"}