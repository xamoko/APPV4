{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, f as readTask, w as writeTask, h, H as Host, e as getElement } from './core-c02a05e9.js';\nimport './config-503c2549.js';\n\nconst CELL_TYPE_ITEM = 'item';\r\nconst CELL_TYPE_HEADER = 'header';\r\nconst CELL_TYPE_FOOTER = 'footer';\r\nconst NODE_CHANGE_NONE = 0;\r\nconst NODE_CHANGE_POSITION = 1;\r\nconst NODE_CHANGE_CELL = 2;\n\nconst MIN_READS = 2;\r\nconst updateVDom = (dom, heightIndex, cells, range) => {\r\n    // reset dom\r\n    for (const node of dom) {\r\n        node.change = NODE_CHANGE_NONE;\r\n        node.d = true;\r\n    }\r\n    // try to match into exisiting dom\r\n    const toMutate = [];\r\n    const end = range.offset + range.length;\r\n    for (let i = range.offset; i < end; i++) {\r\n        const cell = cells[i];\r\n        const node = dom.find(n => n.d && n.cell === cell);\r\n        if (node) {\r\n            const top = heightIndex[i];\r\n            if (top !== node.top) {\r\n                node.top = top;\r\n                node.change = NODE_CHANGE_POSITION;\r\n            }\r\n            node.d = false;\r\n        }\r\n        else {\r\n            toMutate.push(cell);\r\n        }\r\n    }\r\n    // needs to append\r\n    const pool = dom.filter(n => n.d);\r\n    for (const cell of toMutate) {\r\n        const node = pool.find(n => n.d && n.cell.type === cell.type);\r\n        const index = cell.i;\r\n        if (node) {\r\n            node.d = false;\r\n            node.change = NODE_CHANGE_CELL;\r\n            node.cell = cell;\r\n            node.top = heightIndex[index];\r\n        }\r\n        else {\r\n            dom.push({\r\n                d: false,\r\n                cell,\r\n                visible: true,\r\n                change: NODE_CHANGE_CELL,\r\n                top: heightIndex[index],\r\n            });\r\n        }\r\n    }\r\n    dom\r\n        .filter(n => n.d && n.top !== -9999)\r\n        .forEach(n => {\r\n        n.change = NODE_CHANGE_POSITION;\r\n        n.top = -9999;\r\n    });\r\n};\r\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\r\n    const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\r\n    const childrenNu = children.length;\r\n    let child;\r\n    for (let i = 0; i < dom.length; i++) {\r\n        const node = dom[i];\r\n        const cell = node.cell;\r\n        // the cell change, the content must be updated\r\n        if (node.change === NODE_CHANGE_CELL) {\r\n            if (i < childrenNu) {\r\n                child = children[i];\r\n                nodeRender(child, cell, i);\r\n            }\r\n            else {\r\n                const newChild = createNode(el, cell.type);\r\n                child = nodeRender(newChild, cell, i) || newChild;\r\n                child.classList.add('virtual-item');\r\n                el.appendChild(child);\r\n            }\r\n            child['$ionCell'] = cell;\r\n        }\r\n        else {\r\n            child = children[i];\r\n        }\r\n        // only update position when it changes\r\n        if (node.change !== NODE_CHANGE_NONE) {\r\n            child.style.transform = `translate3d(0,${node.top}px,0)`;\r\n        }\r\n        // update visibility\r\n        const visible = cell.visible;\r\n        if (node.visible !== visible) {\r\n            if (visible) {\r\n                child.classList.remove('virtual-loading');\r\n            }\r\n            else {\r\n                child.classList.add('virtual-loading');\r\n            }\r\n            node.visible = visible;\r\n        }\r\n        // dynamic height\r\n        if (cell.reads > 0) {\r\n            updateCellHeight(cell, child);\r\n            cell.reads--;\r\n        }\r\n    }\r\n};\r\nconst createNode = (el, type) => {\r\n    const template = getTemplate(el, type);\r\n    if (template && el.ownerDocument) {\r\n        return el.ownerDocument.importNode(template.content, true).children[0];\r\n    }\r\n    return null;\r\n};\r\nconst getTemplate = (el, type) => {\r\n    switch (type) {\r\n        case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\r\n        case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\r\n        case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\r\n    }\r\n};\r\nconst getViewport = (scrollTop, vierportHeight, margin) => {\r\n    return {\r\n        top: Math.max(scrollTop - margin, 0),\r\n        bottom: scrollTop + vierportHeight + margin\r\n    };\r\n};\r\nconst getRange = (heightIndex, viewport, buffer) => {\r\n    const topPos = viewport.top;\r\n    const bottomPos = viewport.bottom;\r\n    // find top index\r\n    let i = 0;\r\n    for (; i < heightIndex.length; i++) {\r\n        if (heightIndex[i] > topPos) {\r\n            break;\r\n        }\r\n    }\r\n    const offset = Math.max(i - buffer - 1, 0);\r\n    // find bottom index\r\n    for (; i < heightIndex.length; i++) {\r\n        if (heightIndex[i] >= bottomPos) {\r\n            break;\r\n        }\r\n    }\r\n    const end = Math.min(i + buffer, heightIndex.length);\r\n    const length = end - offset;\r\n    return { offset, length };\r\n};\r\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\r\n    const end = range.offset + range.length;\r\n    return (dirtyIndex <= end ||\r\n        currentRange.offset !== range.offset ||\r\n        currentRange.length !== range.length);\r\n};\r\nconst findCellIndex = (cells, index) => {\r\n    const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\r\n    if (index === 0) {\r\n        return 0;\r\n    }\r\n    else if (index === max + 1) {\r\n        return cells.length;\r\n    }\r\n    else {\r\n        return cells.findIndex(c => c.index === index);\r\n    }\r\n};\r\nconst inplaceUpdate = (dst, src, offset) => {\r\n    if (offset === 0 && src.length >= dst.length) {\r\n        return src;\r\n    }\r\n    for (let i = 0; i < src.length; i++) {\r\n        dst[i + offset] = src[i];\r\n    }\r\n    return dst;\r\n};\r\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\r\n    const cells = [];\r\n    const end = len + offset;\r\n    for (let i = offset; i < end; i++) {\r\n        const item = items[i];\r\n        if (headerFn) {\r\n            const value = headerFn(item, i, items);\r\n            if (value != null) {\r\n                cells.push({\r\n                    i: j++,\r\n                    type: CELL_TYPE_HEADER,\r\n                    value,\r\n                    index: i,\r\n                    height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\r\n                    reads: headerHeight ? 0 : MIN_READS,\r\n                    visible: !!headerHeight,\r\n                });\r\n            }\r\n        }\r\n        cells.push({\r\n            i: j++,\r\n            type: CELL_TYPE_ITEM,\r\n            value: item,\r\n            index: i,\r\n            height: itemHeight ? itemHeight(item, i) : approxItemHeight,\r\n            reads: itemHeight ? 0 : MIN_READS,\r\n            visible: !!itemHeight,\r\n        });\r\n        if (footerFn) {\r\n            const value = footerFn(item, i, items);\r\n            if (value != null) {\r\n                cells.push({\r\n                    i: j++,\r\n                    type: CELL_TYPE_FOOTER,\r\n                    value,\r\n                    index: i,\r\n                    height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\r\n                    reads: footerHeight ? 0 : MIN_READS,\r\n                    visible: !!footerHeight,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return cells;\r\n};\r\nconst calcHeightIndex = (buf, cells, index) => {\r\n    let acum = buf[index];\r\n    for (let i = index; i < buf.length; i++) {\r\n        buf[i] = acum;\r\n        acum += cells[i].height;\r\n    }\r\n    return acum;\r\n};\r\nconst resizeBuffer = (buf, len) => {\r\n    if (!buf) {\r\n        return new Uint32Array(len);\r\n    }\r\n    if (buf.length === len) {\r\n        return buf;\r\n    }\r\n    else if (len > buf.length) {\r\n        const newBuf = new Uint32Array(len);\r\n        newBuf.set(buf);\r\n        return newBuf;\r\n    }\r\n    else {\r\n        return buf.subarray(0, len);\r\n    }\r\n};\r\nconst positionForIndex = (index, cells, heightIndex) => {\r\n    const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\r\n    if (cell) {\r\n        return heightIndex[cell.i];\r\n    }\r\n    return -1;\r\n};\n\nconst VirtualScroll = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.range = { offset: 0, length: 0 };\n        this.viewportHeight = 0;\n        this.cells = [];\n        this.virtualDom = [];\n        this.isEnabled = false;\n        this.viewportOffset = 0;\n        this.currentScrollTop = 0;\n        this.indexDirty = 0;\n        this.lastItemLen = 0;\n        this.totalHeight = 0;\n        /**\n         * It is important to provide this\n         * if virtual item height will be significantly larger than the default\n         * The approximate height of each virtual item template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxItemHeight = 45;\n        /**\n         * The approximate height of each header template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxHeaderHeight = 30;\n        /**\n         * The approximate width of each footer template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxFooterHeight = 30;\n        this.onScroll = () => {\n            this.updateVirtualScroll();\n        };\n    }\n    itemsChanged() {\n        this.calcCells();\n        this.updateVirtualScroll();\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.contentEl = contentEl;\n        this.calcCells();\n        this.updateState();\n    }\n    componentDidUpdate() {\n        this.updateState();\n    }\n    disconnectedCallback() {\n        this.scrollEl = undefined;\n    }\n    onResize() {\n        this.calcCells();\n        this.updateVirtualScroll();\n    }\n    /**\n     * Returns the position of the virtual item at the given index.\n     */\n    positionForItem(index) {\n        return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n    }\n    /**\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n     * dirty any time the content or their style changes.\n     *\n     * The subset of items to be updated can are specifing by an offset and a length.\n     */\n    async checkRange(offset, len = -1) {\n        // TODO: kind of hacky how we do in-place updated of the cells\n        // array. this part needs a complete refactor\n        if (!this.items) {\n            return;\n        }\n        const length = (len === -1)\n            ? this.items.length - offset\n            : len;\n        const cellIndex = findCellIndex(this.cells, offset);\n        const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n        this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n        this.lastItemLen = this.items.length;\n        this.indexDirty = Math.max(offset - 1, 0);\n        this.scheduleUpdate();\n    }\n    /**\n     * This method marks the tail the items array as dirty, so they can be re-rendered.\n     *\n     * It's equivalent to calling:\n     *\n     * ```js\n     * virtualScroll.checkRange(lastItemLen);\n     * ```\n     */\n    async checkEnd() {\n        if (this.items) {\n            this.checkRange(this.lastItemLen);\n        }\n    }\n    updateVirtualScroll() {\n        // do nothing if virtual-scroll is disabled\n        if (!this.isEnabled || !this.scrollEl) {\n            return;\n        }\n        // unschedule future updates\n        if (this.timerUpdate) {\n            clearTimeout(this.timerUpdate);\n            this.timerUpdate = undefined;\n        }\n        // schedule DOM operations into the stencil queue\n        readTask(this.readVS.bind(this));\n        writeTask(this.writeVS.bind(this));\n    }\n    readVS() {\n        const { contentEl, scrollEl, el } = this;\n        let topOffset = 0;\n        let node = el;\n        while (node && node !== contentEl) {\n            topOffset += node.offsetTop;\n            node = node.parentElement;\n        }\n        this.viewportOffset = topOffset;\n        if (scrollEl) {\n            this.viewportHeight = scrollEl.offsetHeight;\n            this.currentScrollTop = scrollEl.scrollTop;\n        }\n    }\n    writeVS() {\n        const dirtyIndex = this.indexDirty;\n        // get visible viewport\n        const scrollTop = this.currentScrollTop - this.viewportOffset;\n        const viewport = getViewport(scrollTop, this.viewportHeight, 100);\n        // compute lazily the height index\n        const heightIndex = this.getHeightIndex();\n        // get array bounds of visible cells base in the viewport\n        const range = getRange(heightIndex, viewport, 2);\n        // fast path, do nothing\n        const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n        if (!shouldUpdate) {\n            return;\n        }\n        this.range = range;\n        // in place mutation of the virtual DOM\n        updateVDom(this.virtualDom, heightIndex, this.cells, range);\n        // Write DOM\n        // Different code paths taken depending of the render API used\n        if (this.nodeRender) {\n            doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n        }\n        else if (this.domRender) {\n            this.domRender(this.virtualDom);\n        }\n        else if (this.renderItem) {\n            this.el.forceUpdate();\n        }\n    }\n    updateCellHeight(cell, node) {\n        const update = () => {\n            if (node['$ionCell'] === cell) {\n                const style = window.getComputedStyle(node);\n                const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n                this.setCellHeight(cell, height);\n            }\n        };\n        if (node && node.componentOnReady) {\n            node.componentOnReady().then(update);\n        }\n        else {\n            update();\n        }\n    }\n    setCellHeight(cell, height) {\n        const index = cell.i;\n        // the cell might changed since the height update was scheduled\n        if (cell !== this.cells[index]) {\n            return;\n        }\n        if (cell.height !== height || cell.visible !== true) {\n            cell.visible = true;\n            cell.height = height;\n            this.indexDirty = Math.min(this.indexDirty, index);\n            this.scheduleUpdate();\n        }\n    }\n    scheduleUpdate() {\n        clearTimeout(this.timerUpdate);\n        this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n    }\n    updateState() {\n        const shouldEnable = !!(this.scrollEl &&\n            this.cells);\n        if (shouldEnable !== this.isEnabled) {\n            this.enableScrollEvents(shouldEnable);\n            if (shouldEnable) {\n                this.updateVirtualScroll();\n            }\n        }\n    }\n    calcCells() {\n        if (!this.items) {\n            return;\n        }\n        this.lastItemLen = this.items.length;\n        this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n        this.indexDirty = 0;\n    }\n    getHeightIndex() {\n        if (this.indexDirty !== Infinity) {\n            this.calcHeightIndex(this.indexDirty);\n        }\n        return this.heightIndex;\n    }\n    calcHeightIndex(index = 0) {\n        // TODO: optimize, we don't need to calculate all the cells\n        this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n        this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n        this.indexDirty = Infinity;\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.rmEvent) {\n            this.rmEvent();\n            this.rmEvent = undefined;\n        }\n        const scrollEl = this.scrollEl;\n        if (scrollEl) {\n            this.isEnabled = shouldListen;\n            scrollEl.addEventListener('scroll', this.onScroll);\n            this.rmEvent = () => {\n                scrollEl.removeEventListener('scroll', this.onScroll);\n            };\n        }\n    }\n    renderVirtualNode(node) {\n        const { type, value, index } = node.cell;\n        switch (type) {\n            case CELL_TYPE_ITEM: return this.renderItem(value, index);\n            case CELL_TYPE_HEADER: return this.renderHeader(value, index);\n            case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\n        }\n    }\n    render() {\n        return (h(Host, { style: {\n                height: `${this.totalHeight}px`\n            } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"itemHeight\": [\"itemsChanged\"],\n        \"headerHeight\": [\"itemsChanged\"],\n        \"footerHeight\": [\"itemsChanged\"],\n        \"items\": [\"itemsChanged\"]\n    }; }\n    static get style() { return \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute!important;top:0!important;right:0!important;left:0!important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\"; }\n};\nconst VirtualProxy = ({ dom }, children, utils) => {\n    return utils.map(children, (child, i) => {\n        const node = dom[i];\n        const vattrs = child.vattrs || {};\n        let classes = vattrs.class || '';\n        classes += 'virtual-item ';\n        if (!node.visible) {\n            classes += 'virtual-loading';\n        }\n        return Object.assign({}, child, { vattrs: Object.assign({}, vattrs, { class: classes, style: Object.assign({}, vattrs.style, { transform: `translate3d(0,${node.top}px,0)` }) }) });\n    });\n};\n\nexport { VirtualScroll as ion_virtual_scroll };\n"],"sourceRoot":"webpack:///"}