{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, c as createEvent, e as getElement, d as getIonMode, h, H as Host } from './core-c02a05e9.js';\nimport './config-503c2549.js';\nimport { o as openURL, c as createColorClasses } from './theme-353a032e.js';\nimport { e as debounce } from './helpers-c90aaa66.js';\n\nconst Route = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * Relative path that needs to match in order for this route to apply.\n         *\n         * Accepts paths similar to expressjs so that you can define parameters\n         * in the url /foo/:bar where bar would be available in incoming props.\n         */\n        this.url = '';\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    }\n    onUpdate(newValue) {\n        this.ionRouteDataChanged.emit(newValue);\n    }\n    onComponentProps(newValue, oldValue) {\n        if (newValue === oldValue) {\n            return;\n        }\n        const keys1 = newValue ? Object.keys(newValue) : [];\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\n        if (keys1.length !== keys2.length) {\n            this.onUpdate(newValue);\n            return;\n        }\n        for (const key of keys1) {\n            if (newValue[key] !== oldValue[key]) {\n                this.onUpdate(newValue);\n                return;\n            }\n        }\n    }\n    connectedCallback() {\n        this.ionRouteDataChanged.emit();\n    }\n    static get watchers() { return {\n        \"url\": [\"onUpdate\"],\n        \"component\": [\"onUpdate\"],\n        \"componentProps\": [\"onComponentProps\"]\n    }; }\n};\n\nconst RouteRedirect = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n    }\n    propDidChange() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    connectedCallback() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    static get watchers() { return {\n        \"from\": [\"propDidChange\"],\n        \"to\": [\"propDidChange\"]\n    }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\r\nconst ROUTER_INTENT_FORWARD = 'forward';\r\nconst ROUTER_INTENT_BACK = 'back';\n\nconst generatePath = (segments) => {\r\n    const path = segments\r\n        .filter(s => s.length > 0)\r\n        .join('/');\r\n    return '/' + path;\r\n};\r\nconst chainToPath = (chain) => {\r\n    const path = [];\r\n    for (const route of chain) {\r\n        for (const segment of route.path) {\r\n            if (segment[0] === ':') {\r\n                const param = route.params && route.params[segment.slice(1)];\r\n                if (!param) {\r\n                    return null;\r\n                }\r\n                path.push(param);\r\n            }\r\n            else if (segment !== '') {\r\n                path.push(segment);\r\n            }\r\n        }\r\n    }\r\n    return path;\r\n};\r\nconst writePath = (history, root, useHash, path, direction, state) => {\r\n    let url = generatePath([\r\n        ...parsePath(root),\r\n        ...path\r\n    ]);\r\n    if (useHash) {\r\n        url = '#' + url;\r\n    }\r\n    if (direction === ROUTER_INTENT_FORWARD) {\r\n        history.pushState(state, '', url);\r\n    }\r\n    else {\r\n        history.replaceState(state, '', url);\r\n    }\r\n};\r\nconst removePrefix = (prefix, path) => {\r\n    if (prefix.length > path.length) {\r\n        return null;\r\n    }\r\n    if (prefix.length <= 1 && prefix[0] === '') {\r\n        return path;\r\n    }\r\n    for (let i = 0; i < prefix.length; i++) {\r\n        if (prefix[i].length > 0 && prefix[i] !== path[i]) {\r\n            return null;\r\n        }\r\n    }\r\n    if (path.length === prefix.length) {\r\n        return [''];\r\n    }\r\n    return path.slice(prefix.length);\r\n};\r\nconst readPath = (loc, root, useHash) => {\r\n    let pathname = loc.pathname;\r\n    if (useHash) {\r\n        const hash = loc.hash;\r\n        pathname = (hash[0] === '#')\r\n            ? hash.slice(1)\r\n            : '';\r\n    }\r\n    const prefix = parsePath(root);\r\n    const path = parsePath(pathname);\r\n    return removePrefix(prefix, path);\r\n};\r\nconst parsePath = (path) => {\r\n    if (path == null) {\r\n        return [''];\r\n    }\r\n    const segments = path.split('/')\r\n        .map(s => s.trim())\r\n        .filter(s => s.length > 0);\r\n    if (segments.length === 0) {\r\n        return [''];\r\n    }\r\n    else {\r\n        return segments;\r\n    }\r\n};\n\nconst printRoutes = (routes) => {\r\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\r\n    for (const chain of routes) {\r\n        const path = [];\r\n        chain.forEach(r => path.push(...r.path));\r\n        const ids = chain.map(r => r.id);\r\n        console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\r\n    }\r\n    console.groupEnd();\r\n};\r\nconst printRedirects = (redirects) => {\r\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\r\n    for (const redirect of redirects) {\r\n        if (redirect.to) {\r\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\r\n        }\r\n    }\r\n    console.groupEnd();\r\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false) => {\r\n    try {\r\n        // find next navigation outlet in the DOM\r\n        const outlet = searchNavNode(root);\r\n        // make sure we can continue interacting the DOM, otherwise abort\r\n        if (index >= chain.length || !outlet) {\r\n            return changed;\r\n        }\r\n        await outlet.componentOnReady();\r\n        const route = chain[index];\r\n        const result = await outlet.setRouteId(route.id, route.params, direction);\r\n        // if the outlet changed the page, reset navigation to neutral (no direction)\r\n        // this means nested outlets will not animate\r\n        if (result.changed) {\r\n            direction = ROUTER_INTENT_NONE;\r\n            changed = true;\r\n        }\r\n        // recursively set nested outlets\r\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed);\r\n        // once all nested outlets are visible let's make the parent visible too,\r\n        // using markVisible prevents flickering\r\n        if (result.markVisible) {\r\n            await result.markVisible();\r\n        }\r\n        return changed;\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n        return false;\r\n    }\r\n};\r\nconst readNavState = async (root) => {\r\n    const ids = [];\r\n    let outlet;\r\n    let node = root;\r\n    // tslint:disable-next-line:no-constant-condition\r\n    while (true) {\r\n        outlet = searchNavNode(node);\r\n        if (outlet) {\r\n            const id = await outlet.getRouteId();\r\n            if (id) {\r\n                node = id.element;\r\n                id.element = undefined;\r\n                ids.push(id);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return { ids, outlet };\r\n};\r\nconst waitUntilNavNode = () => {\r\n    if (searchNavNode(document.body)) {\r\n        return Promise.resolve();\r\n    }\r\n    return new Promise(resolve => {\r\n        window.addEventListener('ionNavWillLoad', resolve, { once: true });\r\n    });\r\n};\r\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\r\nconst searchNavNode = (root) => {\r\n    if (!root) {\r\n        return undefined;\r\n    }\r\n    if (root.matches(QUERY)) {\r\n        return root;\r\n    }\r\n    const outlet = root.querySelector(QUERY);\r\n    return outlet ? outlet : undefined;\r\n};\n\nconst matchesRedirect = (input, route) => {\r\n    const { from, to } = route;\r\n    if (to === undefined) {\r\n        return false;\r\n    }\r\n    if (from.length > input.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < from.length; i++) {\r\n        const expected = from[i];\r\n        if (expected === '*') {\r\n            return true;\r\n        }\r\n        if (expected !== input[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return from.length === input.length;\r\n};\r\nconst routeRedirect = (path, routes) => {\r\n    return routes.find(route => matchesRedirect(path, route));\r\n};\r\nconst matchesIDs = (ids, chain) => {\r\n    const len = Math.min(ids.length, chain.length);\r\n    let i = 0;\r\n    for (; i < len; i++) {\r\n        if (ids[i].toLowerCase() !== chain[i].id) {\r\n            break;\r\n        }\r\n    }\r\n    return i;\r\n};\r\nconst matchesPath = (inputPath, chain) => {\r\n    const segments = new RouterSegments(inputPath);\r\n    let matchesDefault = false;\r\n    let allparams;\r\n    for (let i = 0; i < chain.length; i++) {\r\n        const path = chain[i].path;\r\n        if (path[0] === '') {\r\n            matchesDefault = true;\r\n        }\r\n        else {\r\n            for (const segment of path) {\r\n                const data = segments.next();\r\n                // data param\r\n                if (segment[0] === ':') {\r\n                    if (data === '') {\r\n                        return null;\r\n                    }\r\n                    allparams = allparams || [];\r\n                    const params = allparams[i] || (allparams[i] = {});\r\n                    params[segment.slice(1)] = data;\r\n                }\r\n                else if (data !== segment) {\r\n                    return null;\r\n                }\r\n            }\r\n            matchesDefault = false;\r\n        }\r\n    }\r\n    const matches = (matchesDefault)\r\n        ? matchesDefault === (segments.next() === '')\r\n        : true;\r\n    if (!matches) {\r\n        return null;\r\n    }\r\n    if (allparams) {\r\n        return chain.map((route, i) => ({\r\n            id: route.id,\r\n            path: route.path,\r\n            params: mergeParams(route.params, allparams[i])\r\n        }));\r\n    }\r\n    return chain;\r\n};\r\nconst mergeParams = (a, b) => {\r\n    if (!a && b) {\r\n        return b;\r\n    }\r\n    else if (a && !b) {\r\n        return a;\r\n    }\r\n    else if (a && b) {\r\n        return Object.assign({}, a, b);\r\n    }\r\n    return undefined;\r\n};\r\nconst routerIDsToChain = (ids, chains) => {\r\n    let match = null;\r\n    let maxMatches = 0;\r\n    const plainIDs = ids.map(i => i.id);\r\n    for (const chain of chains) {\r\n        const score = matchesIDs(plainIDs, chain);\r\n        if (score > maxMatches) {\r\n            match = chain;\r\n            maxMatches = score;\r\n        }\r\n    }\r\n    if (match) {\r\n        return match.map((route, i) => ({\r\n            id: route.id,\r\n            path: route.path,\r\n            params: mergeParams(route.params, ids[i] && ids[i].params)\r\n        }));\r\n    }\r\n    return null;\r\n};\r\nconst routerPathToChain = (path, chains) => {\r\n    let match = null;\r\n    let matches = 0;\r\n    for (const chain of chains) {\r\n        const matchedChain = matchesPath(path, chain);\r\n        if (matchedChain !== null) {\r\n            const score = computePriority(matchedChain);\r\n            if (score > matches) {\r\n                matches = score;\r\n                match = matchedChain;\r\n            }\r\n        }\r\n    }\r\n    return match;\r\n};\r\nconst computePriority = (chain) => {\r\n    let score = 1;\r\n    let level = 1;\r\n    for (const route of chain) {\r\n        for (const path of route.path) {\r\n            if (path[0] === ':') {\r\n                score += Math.pow(1, level);\r\n            }\r\n            else if (path !== '') {\r\n                score += Math.pow(2, level);\r\n            }\r\n            level++;\r\n        }\r\n    }\r\n    return score;\r\n};\r\nclass RouterSegments {\r\n    constructor(path) {\r\n        this.path = path.slice();\r\n    }\r\n    next() {\r\n        if (this.path.length > 0) {\r\n            return this.path.shift();\r\n        }\r\n        return '';\r\n    }\r\n}\n\nconst readRedirects = (root) => {\r\n    return Array.from(root.children)\r\n        .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\r\n        .map(el => {\r\n        const to = readProp(el, 'to');\r\n        return {\r\n            from: parsePath(readProp(el, 'from')),\r\n            to: to == null ? undefined : parsePath(to),\r\n        };\r\n    });\r\n};\r\nconst readRoutes = (root) => {\r\n    return flattenRouterTree(readRouteNodes(root));\r\n};\r\nconst readRouteNodes = (root, node = root) => {\r\n    return Array.from(node.children)\r\n        .filter(el => el.tagName === 'ION-ROUTE' && el.component)\r\n        .map(el => {\r\n        const component = readProp(el, 'component');\r\n        if (component == null) {\r\n            throw new Error('component missing in ion-route');\r\n        }\r\n        return {\r\n            path: parsePath(readProp(el, 'url')),\r\n            id: component.toLowerCase(),\r\n            params: el.componentProps,\r\n            children: readRouteNodes(root, el)\r\n        };\r\n    });\r\n};\r\nconst readProp = (el, prop) => {\r\n    if (prop in el) {\r\n        return el[prop];\r\n    }\r\n    if (el.hasAttribute(prop)) {\r\n        return el.getAttribute(prop);\r\n    }\r\n    return null;\r\n};\r\nconst flattenRouterTree = (nodes) => {\r\n    const routes = [];\r\n    for (const node of nodes) {\r\n        flattenNode([], routes, node);\r\n    }\r\n    return routes;\r\n};\r\nconst flattenNode = (chain, routes, node) => {\r\n    const s = chain.slice();\r\n    s.push({\r\n        id: node.id,\r\n        path: node.path,\r\n        params: node.params\r\n    });\r\n    if (node.children.length === 0) {\r\n        routes.push(s);\r\n        return;\r\n    }\r\n    for (const sub of node.children) {\r\n        flattenNode(s, routes, sub);\r\n    }\r\n};\n\nconst Router = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.previousPath = null;\n        this.busy = false;\n        this.state = 0;\n        this.lastState = 0;\n        /**\n         * By default `ion-router` will match the routes at the root path (\"/\").\n         * That can be changed when\n         *\n         */\n        this.root = '/';\n        /**\n         * The router can work in two \"modes\":\n         * - With hash: `/index.html#/path/to/page`\n         * - Without hash: `/path/to/page`\n         *\n         * Using one or another might depend in the requirements of your app and/or where it's deployed.\n         *\n         * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n         * requires additional server-side configuration in order to properly work.\n         *\n         * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\n         *\n         * By default, this property is `true`, change to `false` to allow hash-less URLs.\n         */\n        this.useHash = true;\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    }\n    async componentWillLoad() {\n        console.debug('[ion-router] router will load');\n        await waitUntilNavNode();\n        console.debug('[ion-router] found nav');\n        await this.onRoutesChanged();\n    }\n    componentDidLoad() {\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n    }\n    onPopState() {\n        const direction = this.historyDirection();\n        const path = this.getPath();\n        console.debug('[ion-router] URL changed -> update nav', path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    onBackButton(ev) {\n        ev.detail.register(0, () => this.back());\n    }\n    /**\n     * Navigate to the specified URL.\n     *\n     * @param url The url to navigate to.\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\n     */\n    push(url, direction = 'forward') {\n        if (url.startsWith('.')) {\n            url = (new URL(url, window.location.href)).pathname;\n        }\n        console.debug('[ion-router] URL pushed -> updating nav', url, direction);\n        const path = parsePath(url);\n        this.setPath(path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    /**\n     * Go back to previous page in the window.history.\n     */\n    back() {\n        window.history.back();\n        return Promise.resolve(this.waitPromise);\n    }\n    /** @internal */\n    async printDebug() {\n        console.debug('CURRENT PATH', this.getPath());\n        console.debug('PREVIOUS PATH', this.previousPath);\n        printRoutes(readRoutes(this.el));\n        printRedirects(readRedirects(this.el));\n    }\n    /** @internal */\n    async navChanged(direction) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, navChanged was cancelled');\n            return false;\n        }\n        const { ids, outlet } = await readNavState(window.document.body);\n        const routes = readRoutes(this.el);\n        const chain = routerIDsToChain(ids, routes);\n        if (!chain) {\n            console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n            return false;\n        }\n        const path = chainToPath(chain);\n        if (!path) {\n            console.warn('[ion-router] router could not match path because some required param is missing');\n            return false;\n        }\n        console.debug('[ion-router] nav changed -> update URL', ids, path);\n        this.setPath(path, direction);\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n        return true;\n    }\n    onRedirectChanged() {\n        const path = this.getPath();\n        if (path && routeRedirect(path, readRedirects(this.el))) {\n            this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n        }\n    }\n    onRoutesChanged() {\n        return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n    }\n    historyDirection() {\n        const win = window;\n        if (win.history.state === null) {\n            this.state++;\n            win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\n        }\n        const state = win.history.state;\n        const lastState = this.lastState;\n        this.lastState = state;\n        if (state > lastState) {\n            return ROUTER_INTENT_FORWARD;\n        }\n        else if (state < lastState) {\n            return ROUTER_INTENT_BACK;\n        }\n        else {\n            return ROUTER_INTENT_NONE;\n        }\n    }\n    async writeNavStateRoot(path, direction) {\n        if (!path) {\n            console.error('[ion-router] URL is not part of the routing set');\n            return false;\n        }\n        // lookup redirect rule\n        const redirects = readRedirects(this.el);\n        const redirect = routeRedirect(path, redirects);\n        let redirectFrom = null;\n        if (redirect) {\n            this.setPath(redirect.to, direction);\n            redirectFrom = redirect.from;\n            path = redirect.to;\n        }\n        // lookup route chain\n        const routes = readRoutes(this.el);\n        const chain = routerPathToChain(path, routes);\n        if (!chain) {\n            console.error('[ion-router] the path does not match any route');\n            return false;\n        }\n        // write DOM give\n        return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom);\n    }\n    async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0) {\n        const unlock = await this.lock();\n        let changed = false;\n        try {\n            changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        unlock();\n        return changed;\n    }\n    async lock() {\n        const p = this.waitPromise;\n        let resolve;\n        this.waitPromise = new Promise(r => resolve = r);\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    }\n    async writeNavState(node, chain, direction, path, redirectFrom, index = 0) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, transition was cancelled');\n            return false;\n        }\n        this.busy = true;\n        // generate route event and emit will change\n        const routeEvent = this.routeChangeEvent(path, redirectFrom);\n        if (routeEvent) {\n            this.ionRouteWillChange.emit(routeEvent);\n        }\n        const changed = await writeNavState(node, chain, direction, index);\n        this.busy = false;\n        if (changed) {\n            console.debug('[ion-router] route changed', path);\n        }\n        // emit did change\n        if (routeEvent) {\n            this.ionRouteDidChange.emit(routeEvent);\n        }\n        return changed;\n    }\n    setPath(path, direction) {\n        this.state++;\n        writePath(window.history, this.root, this.useHash, path, direction, this.state);\n    }\n    getPath() {\n        return readPath(window.location, this.root, this.useHash);\n    }\n    routeChangeEvent(path, redirectFromPath) {\n        const from = this.previousPath;\n        const to = generatePath(path);\n        this.previousPath = to;\n        if (to === from) {\n            return null;\n        }\n        const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n        return {\n            from,\n            redirectedFrom,\n            to,\n        };\n    }\n    get el() { return getElement(this); }\n};\n\nconst RouterLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * When using a router, it specifies the transition direction when navigating to\n         * another page using `href`.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection);\n        };\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel,\n            target: this.target\n        };\n        return (h(Host, { onClick: this.onClick, class: Object.assign({}, createColorClasses(this.color), { [mode]: true, 'ion-activatable': true }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n    }\n    static get style() { return \":host{--background:transparent;--color:var(--ion-color-primary,#3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\"; }\n};\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"],"sourceRoot":"webpack:///"}